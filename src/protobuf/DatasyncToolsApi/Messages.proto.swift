// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file messages.proto

import Foundation
import ProtocolBuffers


internal func == (lhs: ProtoRequestSyncEntityMessageResponse, rhs: ProtoRequestSyncEntityMessageResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasResult == rhs.hasResult) && (!lhs.hasResult || lhs.result == rhs.result)
  fieldCheck = fieldCheck && (lhs.hasResultMsg == rhs.hasResultMsg) && (!lhs.hasResultMsg || lhs.resultMsg == rhs.resultMsg)
  fieldCheck = fieldCheck && (lhs.hasRequest == rhs.hasRequest) && (!lhs.hasRequest || lhs.request == rhs.request)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoSyncEntityMessageRequest, rhs: ProtoSyncEntityMessageRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIsDelete == rhs.hasIsDelete) && (!lhs.hasIsDelete || lhs.isDelete == rhs.isDelete)
  fieldCheck = fieldCheck && (lhs.hasTransactionBindId == rhs.hasTransactionBindId) && (!lhs.hasTransactionBindId || lhs.transactionBindId == rhs.transactionBindId)
  fieldCheck = fieldCheck && (lhs.items == rhs.items)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoSyncDataMessagesRequest, rhs: ProtoSyncDataMessagesRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasEntityPluralName == rhs.hasEntityPluralName) && (!lhs.hasEntityPluralName || lhs.entityPluralName == rhs.entityPluralName)
  fieldCheck = fieldCheck && (lhs.msgs == rhs.msgs)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoSyncDataMessageRequest, rhs: ProtoSyncDataMessageRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasRecordId == rhs.hasRecordId) && (!lhs.hasRecordId || lhs.recordId == rhs.recordId)
  fieldCheck = fieldCheck && (lhs.hasRecordHash == rhs.hasRecordHash) && (!lhs.hasRecordHash || lhs.recordHash == rhs.recordHash)
  fieldCheck = fieldCheck && (lhs.hasLastKnownPeerHash == rhs.hasLastKnownPeerHash) && (!lhs.hasLastKnownPeerHash || lhs.lastKnownPeerHash == rhs.lastKnownPeerHash)
  fieldCheck = fieldCheck && (lhs.hasSentSyncState == rhs.hasSentSyncState) && (!lhs.hasSentSyncState || lhs.sentSyncState == rhs.sentSyncState)
  fieldCheck = fieldCheck && (lhs.hasRecordBytesSize == rhs.hasRecordBytesSize) && (!lhs.hasRecordBytesSize || lhs.recordBytesSize == rhs.recordBytesSize)
  fieldCheck = fieldCheck && (lhs.hasRecordData == rhs.hasRecordData) && (!lhs.hasRecordData || lhs.recordData == rhs.recordData)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoSyncEntityMessageResponse, rhs: ProtoSyncEntityMessageResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTransactionBindId == rhs.hasTransactionBindId) && (!lhs.hasTransactionBindId || lhs.transactionBindId == rhs.transactionBindId)
  fieldCheck = fieldCheck && (lhs.items == rhs.items)
  fieldCheck = fieldCheck && (lhs.hasResult == rhs.hasResult) && (!lhs.hasResult || lhs.result == rhs.result)
  fieldCheck = fieldCheck && (lhs.hasResultMsg == rhs.hasResultMsg) && (!lhs.hasResultMsg || lhs.resultMsg == rhs.resultMsg)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoSyncDataMessagesResponse, rhs: ProtoSyncDataMessagesResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasEntityPluralName == rhs.hasEntityPluralName) && (!lhs.hasEntityPluralName || lhs.entityPluralName == rhs.entityPluralName)
  fieldCheck = fieldCheck && (lhs.msgs == rhs.msgs)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoSyncDataMessageResponse, rhs: ProtoSyncDataMessageResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasRecordId == rhs.hasRecordId) && (!lhs.hasRecordId || lhs.recordId == rhs.recordId)
  fieldCheck = fieldCheck && (lhs.hasRequestHash == rhs.hasRequestHash) && (!lhs.hasRequestHash || lhs.requestHash == rhs.requestHash)
  fieldCheck = fieldCheck && (lhs.hasResponseHash == rhs.hasResponseHash) && (!lhs.hasResponseHash || lhs.responseHash == rhs.responseHash)
  fieldCheck = fieldCheck && (lhs.hasSyncState == rhs.hasSyncState) && (!lhs.hasSyncState || lhs.syncState == rhs.syncState)
  fieldCheck = fieldCheck && (lhs.hasRecordBytesSize == rhs.hasRecordBytesSize) && (!lhs.hasRecordBytesSize || lhs.recordBytesSize == rhs.recordBytesSize)
  fieldCheck = fieldCheck && (lhs.hasRecordData == rhs.hasRecordData) && (!lhs.hasRecordData || lhs.recordData == rhs.recordData)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoRecord, rhs: ProtoRecord) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.fields == rhs.fields)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoField, rhs: ProtoField) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasEncodedFieldType == rhs.hasEncodedFieldType) && (!lhs.hasEncodedFieldType || lhs.encodedFieldType == rhs.encodedFieldType)
  fieldCheck = fieldCheck && (lhs.hasFieldName == rhs.hasFieldName) && (!lhs.hasFieldName || lhs.fieldName == rhs.fieldName)
  fieldCheck = fieldCheck && (lhs.hasFieldValue == rhs.hasFieldValue) && (!lhs.hasFieldValue || lhs.fieldValue == rhs.fieldValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoFieldTypeDouble, rhs: ProtoFieldTypeDouble) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFieldValue == rhs.hasFieldValue) && (!lhs.hasFieldValue || lhs.fieldValue == rhs.fieldValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoFieldTypeFloat, rhs: ProtoFieldTypeFloat) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFieldValue == rhs.hasFieldValue) && (!lhs.hasFieldValue || lhs.fieldValue == rhs.fieldValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoFieldTypeInt32, rhs: ProtoFieldTypeInt32) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFieldValue == rhs.hasFieldValue) && (!lhs.hasFieldValue || lhs.fieldValue == rhs.fieldValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoFieldTypeInt64, rhs: ProtoFieldTypeInt64) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFieldValue == rhs.hasFieldValue) && (!lhs.hasFieldValue || lhs.fieldValue == rhs.fieldValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoFieldTypeUint32, rhs: ProtoFieldTypeUint32) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFieldValue == rhs.hasFieldValue) && (!lhs.hasFieldValue || lhs.fieldValue == rhs.fieldValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoFieldTypeUint64, rhs: ProtoFieldTypeUint64) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFieldValue == rhs.hasFieldValue) && (!lhs.hasFieldValue || lhs.fieldValue == rhs.fieldValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoFieldTypeSint32, rhs: ProtoFieldTypeSint32) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFieldValue == rhs.hasFieldValue) && (!lhs.hasFieldValue || lhs.fieldValue == rhs.fieldValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoFieldTypeSint64, rhs: ProtoFieldTypeSint64) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFieldValue == rhs.hasFieldValue) && (!lhs.hasFieldValue || lhs.fieldValue == rhs.fieldValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoFieldTypeFixed32, rhs: ProtoFieldTypeFixed32) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFieldValue == rhs.hasFieldValue) && (!lhs.hasFieldValue || lhs.fieldValue == rhs.fieldValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoFieldTypeFixed64, rhs: ProtoFieldTypeFixed64) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFieldValue == rhs.hasFieldValue) && (!lhs.hasFieldValue || lhs.fieldValue == rhs.fieldValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoFieldTypeSfixed32, rhs: ProtoFieldTypeSfixed32) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFieldValue == rhs.hasFieldValue) && (!lhs.hasFieldValue || lhs.fieldValue == rhs.fieldValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoFieldTypeSfixed64, rhs: ProtoFieldTypeSfixed64) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFieldValue == rhs.hasFieldValue) && (!lhs.hasFieldValue || lhs.fieldValue == rhs.fieldValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoFieldTypeBool, rhs: ProtoFieldTypeBool) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFieldValue == rhs.hasFieldValue) && (!lhs.hasFieldValue || lhs.fieldValue == rhs.fieldValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoFieldTypeString, rhs: ProtoFieldTypeString) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFieldValue == rhs.hasFieldValue) && (!lhs.hasFieldValue || lhs.fieldValue == rhs.fieldValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: ProtoFieldTypeBytes, rhs: ProtoFieldTypeBytes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFieldValue == rhs.hasFieldValue) && (!lhs.hasFieldValue || lhs.fieldValue == rhs.fieldValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal struct MessagesRoot {
  internal static var sharedInstance : MessagesRoot {
   struct Static {
       static let instance : MessagesRoot = MessagesRoot()
   }
   return Static.instance
  }
  internal var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  internal func registerAllExtensions(registry:ExtensionRegistry) {
  }
}



//Enum type declaration start 

internal enum SyncRequestEntityMessageResponseResult:Int32 {
  case HasMsgs = 1
  case NoMsgs = 2
  case ErrorCreatingMsgs = 3

}

//Enum type declaration end 



//Enum type declaration start 

internal enum SyncEntityMessageResponseResult:Int32 {
  case Ok = 1
  case Error = 2

}

//Enum type declaration end 



//Enum type declaration start 

internal enum SentSyncStateEnum:Int32 {
  case PersistedNeverSentToPeer = 1
  case PersistedFirstTimeSentToPeer = 2
  case PersistedStandardSentToPeer = 3
  case PersistedFastDeleted = 4

}

//Enum type declaration end 



//Enum type declaration start 

internal enum AckSyncStateEnum:Int32 {
  case AckFastBatch = 21
  case AckRecordLevelConflictResolvedSeparateFieldsChanged = 22
  case AckFieldLevelConflictwithNoAutoResolverAvailable = 23
  case AckFieldLevelConflictResolvedWithAutoResolver = 24
  case AckFieldLevelConflictWithNoAutoResolverResolution = 25
  case AckDeleteAndUpdateConflictWithNoAutoResolverAvailable = 26
  case AckDeleteAndUpdateConflictWithNoAutoResolution = 27
  case AckDeleteAndUpdateConflictWithAutoResolution = 28

}

//Enum type declaration end 



//Enum type declaration start 

internal enum ProtoEncodedFieldType:Int32 {
  case Double = 0
  case Float = 1
  case Int32 = 2
  case Int64 = 3
  case Uint32 = 4
  case Uint64 = 5
  case Sint32 = 6
  case Sint64 = 7
  case Fixed32 = 8
  case Fixed64 = 9
  case Sfixed32 = 10
  case Sfixed64 = 11
  case Bool = 12
  case String = 13
  case Bytes = 14

}

//Enum type declaration end 

final internal class ProtoRequestSyncEntityMessageResponse : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var result:SyncRequestEntityMessageResponseResult = SyncRequestEntityMessageResponseResult.HasMsgs
  private(set) var hasResult:Bool = false
  private(set) var hasResultMsg:Bool = false
  private(set) var resultMsg:String = ""

  private(set) var hasRequest:Bool = false
  private(set) var request:ProtoSyncEntityMessageRequest!
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasResult {
      return false
    }
    if !hasResultMsg {
      return false
    }
    if hasRequest {
     if !request.isInitialized() {
       return false
     }
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasResult {
      try output.writeEnum(1, value:result.rawValue)
    }
    if hasResultMsg {
      try output.writeString(2, value:resultMsg)
    }
    if hasRequest {
      try output.writeMessage(3, value:request)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if (hasResult) {
      serialize_size += result.rawValue.computeEnumSize(1)
    }
    if hasResultMsg {
      serialize_size += resultMsg.computeStringSize(2)
    }
    if hasRequest {
        if let varSizerequest = request?.computeMessageSize(3) {
            serialize_size += varSizerequest
        }
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoRequestSyncEntityMessageResponse> {
    var mergedArray = Array<ProtoRequestSyncEntityMessageResponse>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoRequestSyncEntityMessageResponse? {
    return try ProtoRequestSyncEntityMessageResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoRequestSyncEntityMessageResponse {
    return try ProtoRequestSyncEntityMessageResponse.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoRequestSyncEntityMessageResponse {
    return try ProtoRequestSyncEntityMessageResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoRequestSyncEntityMessageResponse {
    return try ProtoRequestSyncEntityMessageResponse.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoRequestSyncEntityMessageResponse {
    return try ProtoRequestSyncEntityMessageResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoRequestSyncEntityMessageResponse {
    return try ProtoRequestSyncEntityMessageResponse.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoRequestSyncEntityMessageResponse {
    return try ProtoRequestSyncEntityMessageResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoRequestSyncEntityMessageResponse.Builder {
    return ProtoRequestSyncEntityMessageResponse.classBuilder() as! ProtoRequestSyncEntityMessageResponse.Builder
  }
  internal func getBuilder() -> ProtoRequestSyncEntityMessageResponse.Builder {
    return classBuilder() as! ProtoRequestSyncEntityMessageResponse.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoRequestSyncEntityMessageResponse.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoRequestSyncEntityMessageResponse.Builder()
  }
  internal func toBuilder() throws -> ProtoRequestSyncEntityMessageResponse.Builder {
    return try ProtoRequestSyncEntityMessageResponse.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoRequestSyncEntityMessageResponse) throws -> ProtoRequestSyncEntityMessageResponse.Builder {
    return try ProtoRequestSyncEntityMessageResponse.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if (hasResult) {
      output += "\(indent) result: \(result.rawValue)\n"
    }
    if hasResultMsg {
      output += "\(indent) resultMsg: \(resultMsg) \n"
    }
    if hasRequest {
      output += "\(indent) request {\n"
      try request?.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasResult {
             hashCode = (hashCode &* 31) &+ Int(result.rawValue)
          }
          if hasResultMsg {
             hashCode = (hashCode &* 31) &+ resultMsg.hashValue
          }
          if hasRequest {
              if let hashValuerequest = request?.hashValue {
                  hashCode = (hashCode &* 31) &+ hashValuerequest
              }
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoRequestSyncEntityMessageResponse"
  }
  override internal func className() -> String {
      return "ProtoRequestSyncEntityMessageResponse"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoRequestSyncEntityMessageResponse.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoRequestSyncEntityMessageResponse = ProtoRequestSyncEntityMessageResponse()
    internal func getMessage() -> ProtoRequestSyncEntityMessageResponse {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
      var hasResult:Bool{
          get {
              return builderResult.hasResult
          }
      }
      var result:SyncRequestEntityMessageResponseResult {
          get {
              return builderResult.result
          }
          set (value) {
              builderResult.hasResult = true
              builderResult.result = value
          }
      }
      internal func setResult(value:SyncRequestEntityMessageResponseResult) -> ProtoRequestSyncEntityMessageResponse.Builder {
        self.result = value
        return self
      }
      internal func clearResult() -> ProtoRequestSyncEntityMessageResponse.Builder {
         builderResult.hasResult = false
         builderResult.result = .HasMsgs
         return self
      }
    var hasResultMsg:Bool {
         get {
              return builderResult.hasResultMsg
         }
    }
    var resultMsg:String {
         get {
              return builderResult.resultMsg
         }
         set (value) {
             builderResult.hasResultMsg = true
             builderResult.resultMsg = value
         }
    }
    func setResultMsg(value:String) -> ProtoRequestSyncEntityMessageResponse.Builder {
      self.resultMsg = value
      return self
    }
    internal func clearResultMsg() -> ProtoRequestSyncEntityMessageResponse.Builder{
         builderResult.hasResultMsg = false
         builderResult.resultMsg = ""
         return self
    }
    var hasRequest:Bool {
         get {
             return builderResult.hasRequest
         }
    }
    var request:ProtoSyncEntityMessageRequest! {
         get {
             if requestBuilder_ != nil {
                builderResult.request = requestBuilder_.getMessage()
             }
             return builderResult.request
         }
         set (value) {
             builderResult.hasRequest = true
             builderResult.request = value
         }
    }
    private var requestBuilder_:ProtoSyncEntityMessageRequest.Builder! {
         didSet {
            builderResult.hasRequest = true
         }
    }
    internal func getRequestBuilder() -> ProtoSyncEntityMessageRequest.Builder {
      if requestBuilder_ == nil {
         requestBuilder_ = ProtoSyncEntityMessageRequest.Builder()
         builderResult.request = requestBuilder_.getMessage()
         if request != nil {
            try! requestBuilder_.mergeFrom(request)
         }
      }
      return requestBuilder_
    }
    func setRequest(value:ProtoSyncEntityMessageRequest!) -> ProtoRequestSyncEntityMessageResponse.Builder {
      self.request = value
      return self
    }
    internal func mergeRequest(value:ProtoSyncEntityMessageRequest) throws -> ProtoRequestSyncEntityMessageResponse.Builder {
      if builderResult.hasRequest {
        builderResult.request = try ProtoSyncEntityMessageRequest.builderWithPrototype(builderResult.request).mergeFrom(value).buildPartial()
      } else {
        builderResult.request = value
      }
      builderResult.hasRequest = true
      return self
    }
    internal func clearRequest() -> ProtoRequestSyncEntityMessageResponse.Builder {
      requestBuilder_ = nil
      builderResult.hasRequest = false
      builderResult.request = nil
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoRequestSyncEntityMessageResponse.Builder {
      builderResult = ProtoRequestSyncEntityMessageResponse()
      return self
    }
    internal override func clone() throws -> ProtoRequestSyncEntityMessageResponse.Builder {
      return try ProtoRequestSyncEntityMessageResponse.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoRequestSyncEntityMessageResponse {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoRequestSyncEntityMessageResponse {
      let returnMe:ProtoRequestSyncEntityMessageResponse = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoRequestSyncEntityMessageResponse) throws -> ProtoRequestSyncEntityMessageResponse.Builder {
      if other == ProtoRequestSyncEntityMessageResponse() {
       return self
      }
      if other.hasResult {
           result = other.result
      }
      if other.hasResultMsg {
           resultMsg = other.resultMsg
      }
      if (other.hasRequest) {
          try mergeRequest(other.request)
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoRequestSyncEntityMessageResponse.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoRequestSyncEntityMessageResponse.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntresult = try input.readEnum()
          if let enumsresult = SyncRequestEntityMessageResponseResult(rawValue:valueIntresult){
               result = enumsresult
          } else {
               try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntresult))
          }

        case 18 :
          resultMsg = try input.readString()

        case 26 :
          let subBuilder:ProtoSyncEntityMessageRequest.Builder = ProtoSyncEntityMessageRequest.Builder()
          if hasRequest {
            try subBuilder.mergeFrom(request)
          }
          try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          request = subBuilder.buildPartial()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoSyncEntityMessageRequest : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasIsDelete:Bool = false
  private(set) var isDelete:Bool = false

  private(set) var hasTransactionBindId:Bool = false
  private(set) var transactionBindId:String = ""

  private(set) var items:Array<ProtoSyncDataMessagesRequest>  = Array<ProtoSyncDataMessagesRequest>()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasIsDelete {
      return false
    }
    if !hasTransactionBindId {
      return false
    }
    var isInititems:Bool = true
    for oneElementitems in items {
        if (!oneElementitems.isInitialized()) {
            isInititems = false
            break 
        }
    }
    if !isInititems {
     return isInititems
     }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasIsDelete {
      try output.writeBool(1, value:isDelete)
    }
    if hasTransactionBindId {
      try output.writeString(2, value:transactionBindId)
    }
    for oneElementitems in items {
        try output.writeMessage(3, value:oneElementitems)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasIsDelete {
      serialize_size += isDelete.computeBoolSize(1)
    }
    if hasTransactionBindId {
      serialize_size += transactionBindId.computeStringSize(2)
    }
    for oneElementitems in items {
        serialize_size += oneElementitems.computeMessageSize(3)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoSyncEntityMessageRequest> {
    var mergedArray = Array<ProtoSyncEntityMessageRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoSyncEntityMessageRequest? {
    return try ProtoSyncEntityMessageRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoSyncEntityMessageRequest {
    return try ProtoSyncEntityMessageRequest.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncEntityMessageRequest {
    return try ProtoSyncEntityMessageRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoSyncEntityMessageRequest {
    return try ProtoSyncEntityMessageRequest.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncEntityMessageRequest {
    return try ProtoSyncEntityMessageRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoSyncEntityMessageRequest {
    return try ProtoSyncEntityMessageRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncEntityMessageRequest {
    return try ProtoSyncEntityMessageRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoSyncEntityMessageRequest.Builder {
    return ProtoSyncEntityMessageRequest.classBuilder() as! ProtoSyncEntityMessageRequest.Builder
  }
  internal func getBuilder() -> ProtoSyncEntityMessageRequest.Builder {
    return classBuilder() as! ProtoSyncEntityMessageRequest.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoSyncEntityMessageRequest.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoSyncEntityMessageRequest.Builder()
  }
  internal func toBuilder() throws -> ProtoSyncEntityMessageRequest.Builder {
    return try ProtoSyncEntityMessageRequest.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoSyncEntityMessageRequest) throws -> ProtoSyncEntityMessageRequest.Builder {
    return try ProtoSyncEntityMessageRequest.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasIsDelete {
      output += "\(indent) isDelete: \(isDelete) \n"
    }
    if hasTransactionBindId {
      output += "\(indent) transactionBindId: \(transactionBindId) \n"
    }
    var itemsElementIndex:Int = 0
    for oneElementitems in items {
        output += "\(indent) items[\(itemsElementIndex)] {\n"
        try oneElementitems.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        itemsElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasIsDelete {
             hashCode = (hashCode &* 31) &+ isDelete.hashValue
          }
          if hasTransactionBindId {
             hashCode = (hashCode &* 31) &+ transactionBindId.hashValue
          }
          for oneElementitems in items {
              hashCode = (hashCode &* 31) &+ oneElementitems.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoSyncEntityMessageRequest"
  }
  override internal func className() -> String {
      return "ProtoSyncEntityMessageRequest"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoSyncEntityMessageRequest.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoSyncEntityMessageRequest = ProtoSyncEntityMessageRequest()
    internal func getMessage() -> ProtoSyncEntityMessageRequest {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasIsDelete:Bool {
         get {
              return builderResult.hasIsDelete
         }
    }
    var isDelete:Bool {
         get {
              return builderResult.isDelete
         }
         set (value) {
             builderResult.hasIsDelete = true
             builderResult.isDelete = value
         }
    }
    func setIsDelete(value:Bool) -> ProtoSyncEntityMessageRequest.Builder {
      self.isDelete = value
      return self
    }
    internal func clearIsDelete() -> ProtoSyncEntityMessageRequest.Builder{
         builderResult.hasIsDelete = false
         builderResult.isDelete = false
         return self
    }
    var hasTransactionBindId:Bool {
         get {
              return builderResult.hasTransactionBindId
         }
    }
    var transactionBindId:String {
         get {
              return builderResult.transactionBindId
         }
         set (value) {
             builderResult.hasTransactionBindId = true
             builderResult.transactionBindId = value
         }
    }
    func setTransactionBindId(value:String) -> ProtoSyncEntityMessageRequest.Builder {
      self.transactionBindId = value
      return self
    }
    internal func clearTransactionBindId() -> ProtoSyncEntityMessageRequest.Builder{
         builderResult.hasTransactionBindId = false
         builderResult.transactionBindId = ""
         return self
    }
    var items:Array<ProtoSyncDataMessagesRequest> {
         get {
             return builderResult.items
         }
         set (value) {
             builderResult.items = value
         }
    }
    func setItems(value:Array<ProtoSyncDataMessagesRequest>) -> ProtoSyncEntityMessageRequest.Builder {
      self.items = value
      return self
    }
    internal func clearItems() -> ProtoSyncEntityMessageRequest.Builder {
      builderResult.items.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoSyncEntityMessageRequest.Builder {
      builderResult = ProtoSyncEntityMessageRequest()
      return self
    }
    internal override func clone() throws -> ProtoSyncEntityMessageRequest.Builder {
      return try ProtoSyncEntityMessageRequest.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoSyncEntityMessageRequest {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoSyncEntityMessageRequest {
      let returnMe:ProtoSyncEntityMessageRequest = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoSyncEntityMessageRequest) throws -> ProtoSyncEntityMessageRequest.Builder {
      if other == ProtoSyncEntityMessageRequest() {
       return self
      }
      if other.hasIsDelete {
           isDelete = other.isDelete
      }
      if other.hasTransactionBindId {
           transactionBindId = other.transactionBindId
      }
      if !other.items.isEmpty  {
         builderResult.items += other.items
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoSyncEntityMessageRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncEntityMessageRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          isDelete = try input.readBool()

        case 18 :
          transactionBindId = try input.readString()

        case 26 :
          let subBuilder = ProtoSyncDataMessagesRequest.Builder()
          try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          items += [subBuilder.buildPartial()]

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoSyncDataMessagesRequest : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasEntityPluralName:Bool = false
  private(set) var entityPluralName:String = ""

  private(set) var msgs:Array<ProtoSyncDataMessageRequest>  = Array<ProtoSyncDataMessageRequest>()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasEntityPluralName {
      return false
    }
    var isInitmsgs:Bool = true
    for oneElementmsgs in msgs {
        if (!oneElementmsgs.isInitialized()) {
            isInitmsgs = false
            break 
        }
    }
    if !isInitmsgs {
     return isInitmsgs
     }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasEntityPluralName {
      try output.writeString(1, value:entityPluralName)
    }
    for oneElementmsgs in msgs {
        try output.writeMessage(2, value:oneElementmsgs)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasEntityPluralName {
      serialize_size += entityPluralName.computeStringSize(1)
    }
    for oneElementmsgs in msgs {
        serialize_size += oneElementmsgs.computeMessageSize(2)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoSyncDataMessagesRequest> {
    var mergedArray = Array<ProtoSyncDataMessagesRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoSyncDataMessagesRequest? {
    return try ProtoSyncDataMessagesRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoSyncDataMessagesRequest {
    return try ProtoSyncDataMessagesRequest.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncDataMessagesRequest {
    return try ProtoSyncDataMessagesRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoSyncDataMessagesRequest {
    return try ProtoSyncDataMessagesRequest.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncDataMessagesRequest {
    return try ProtoSyncDataMessagesRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoSyncDataMessagesRequest {
    return try ProtoSyncDataMessagesRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncDataMessagesRequest {
    return try ProtoSyncDataMessagesRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoSyncDataMessagesRequest.Builder {
    return ProtoSyncDataMessagesRequest.classBuilder() as! ProtoSyncDataMessagesRequest.Builder
  }
  internal func getBuilder() -> ProtoSyncDataMessagesRequest.Builder {
    return classBuilder() as! ProtoSyncDataMessagesRequest.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoSyncDataMessagesRequest.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoSyncDataMessagesRequest.Builder()
  }
  internal func toBuilder() throws -> ProtoSyncDataMessagesRequest.Builder {
    return try ProtoSyncDataMessagesRequest.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoSyncDataMessagesRequest) throws -> ProtoSyncDataMessagesRequest.Builder {
    return try ProtoSyncDataMessagesRequest.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasEntityPluralName {
      output += "\(indent) entityPluralName: \(entityPluralName) \n"
    }
    var msgsElementIndex:Int = 0
    for oneElementmsgs in msgs {
        output += "\(indent) msgs[\(msgsElementIndex)] {\n"
        try oneElementmsgs.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        msgsElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasEntityPluralName {
             hashCode = (hashCode &* 31) &+ entityPluralName.hashValue
          }
          for oneElementmsgs in msgs {
              hashCode = (hashCode &* 31) &+ oneElementmsgs.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoSyncDataMessagesRequest"
  }
  override internal func className() -> String {
      return "ProtoSyncDataMessagesRequest"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoSyncDataMessagesRequest.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoSyncDataMessagesRequest = ProtoSyncDataMessagesRequest()
    internal func getMessage() -> ProtoSyncDataMessagesRequest {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasEntityPluralName:Bool {
         get {
              return builderResult.hasEntityPluralName
         }
    }
    var entityPluralName:String {
         get {
              return builderResult.entityPluralName
         }
         set (value) {
             builderResult.hasEntityPluralName = true
             builderResult.entityPluralName = value
         }
    }
    func setEntityPluralName(value:String) -> ProtoSyncDataMessagesRequest.Builder {
      self.entityPluralName = value
      return self
    }
    internal func clearEntityPluralName() -> ProtoSyncDataMessagesRequest.Builder{
         builderResult.hasEntityPluralName = false
         builderResult.entityPluralName = ""
         return self
    }
    var msgs:Array<ProtoSyncDataMessageRequest> {
         get {
             return builderResult.msgs
         }
         set (value) {
             builderResult.msgs = value
         }
    }
    func setMsgs(value:Array<ProtoSyncDataMessageRequest>) -> ProtoSyncDataMessagesRequest.Builder {
      self.msgs = value
      return self
    }
    internal func clearMsgs() -> ProtoSyncDataMessagesRequest.Builder {
      builderResult.msgs.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoSyncDataMessagesRequest.Builder {
      builderResult = ProtoSyncDataMessagesRequest()
      return self
    }
    internal override func clone() throws -> ProtoSyncDataMessagesRequest.Builder {
      return try ProtoSyncDataMessagesRequest.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoSyncDataMessagesRequest {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoSyncDataMessagesRequest {
      let returnMe:ProtoSyncDataMessagesRequest = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoSyncDataMessagesRequest) throws -> ProtoSyncDataMessagesRequest.Builder {
      if other == ProtoSyncDataMessagesRequest() {
       return self
      }
      if other.hasEntityPluralName {
           entityPluralName = other.entityPluralName
      }
      if !other.msgs.isEmpty  {
         builderResult.msgs += other.msgs
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoSyncDataMessagesRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncDataMessagesRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          entityPluralName = try input.readString()

        case 18 :
          let subBuilder = ProtoSyncDataMessageRequest.Builder()
          try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          msgs += [subBuilder.buildPartial()]

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoSyncDataMessageRequest : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasRecordId:Bool = false
  private(set) var recordId:String = ""

  private(set) var hasRecordHash:Bool = false
  private(set) var recordHash:String = ""

  private(set) var hasLastKnownPeerHash:Bool = false
  private(set) var lastKnownPeerHash:String = ""

  private(set) var sentSyncState:SentSyncStateEnum = SentSyncStateEnum.PersistedNeverSentToPeer
  private(set) var hasSentSyncState:Bool = false
  private(set) var hasRecordBytesSize:Bool = false
  private(set) var recordBytesSize:UInt32 = UInt32(0)

  private(set) var hasRecordData:Bool = false
  private(set) var recordData:NSData = NSData()

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasRecordId {
      return false
    }
    if !hasRecordHash {
      return false
    }
    if !hasSentSyncState {
      return false
    }
    if !hasRecordBytesSize {
      return false
    }
    if !hasRecordData {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasRecordId {
      try output.writeString(1, value:recordId)
    }
    if hasRecordHash {
      try output.writeString(2, value:recordHash)
    }
    if hasLastKnownPeerHash {
      try output.writeString(3, value:lastKnownPeerHash)
    }
    if hasSentSyncState {
      try output.writeEnum(4, value:sentSyncState.rawValue)
    }
    if hasRecordBytesSize {
      try output.writeUInt32(5, value:recordBytesSize)
    }
    if hasRecordData {
      try output.writeData(6, value:recordData)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasRecordId {
      serialize_size += recordId.computeStringSize(1)
    }
    if hasRecordHash {
      serialize_size += recordHash.computeStringSize(2)
    }
    if hasLastKnownPeerHash {
      serialize_size += lastKnownPeerHash.computeStringSize(3)
    }
    if (hasSentSyncState) {
      serialize_size += sentSyncState.rawValue.computeEnumSize(4)
    }
    if hasRecordBytesSize {
      serialize_size += recordBytesSize.computeUInt32Size(5)
    }
    if hasRecordData {
      serialize_size += recordData.computeDataSize(6)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoSyncDataMessageRequest> {
    var mergedArray = Array<ProtoSyncDataMessageRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoSyncDataMessageRequest? {
    return try ProtoSyncDataMessageRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoSyncDataMessageRequest {
    return try ProtoSyncDataMessageRequest.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncDataMessageRequest {
    return try ProtoSyncDataMessageRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoSyncDataMessageRequest {
    return try ProtoSyncDataMessageRequest.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncDataMessageRequest {
    return try ProtoSyncDataMessageRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoSyncDataMessageRequest {
    return try ProtoSyncDataMessageRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncDataMessageRequest {
    return try ProtoSyncDataMessageRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoSyncDataMessageRequest.Builder {
    return ProtoSyncDataMessageRequest.classBuilder() as! ProtoSyncDataMessageRequest.Builder
  }
  internal func getBuilder() -> ProtoSyncDataMessageRequest.Builder {
    return classBuilder() as! ProtoSyncDataMessageRequest.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoSyncDataMessageRequest.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoSyncDataMessageRequest.Builder()
  }
  internal func toBuilder() throws -> ProtoSyncDataMessageRequest.Builder {
    return try ProtoSyncDataMessageRequest.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoSyncDataMessageRequest) throws -> ProtoSyncDataMessageRequest.Builder {
    return try ProtoSyncDataMessageRequest.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasRecordId {
      output += "\(indent) recordId: \(recordId) \n"
    }
    if hasRecordHash {
      output += "\(indent) recordHash: \(recordHash) \n"
    }
    if hasLastKnownPeerHash {
      output += "\(indent) lastKnownPeerHash: \(lastKnownPeerHash) \n"
    }
    if (hasSentSyncState) {
      output += "\(indent) sentSyncState: \(sentSyncState.rawValue)\n"
    }
    if hasRecordBytesSize {
      output += "\(indent) recordBytesSize: \(recordBytesSize) \n"
    }
    if hasRecordData {
      output += "\(indent) recordData: \(recordData) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasRecordId {
             hashCode = (hashCode &* 31) &+ recordId.hashValue
          }
          if hasRecordHash {
             hashCode = (hashCode &* 31) &+ recordHash.hashValue
          }
          if hasLastKnownPeerHash {
             hashCode = (hashCode &* 31) &+ lastKnownPeerHash.hashValue
          }
          if hasSentSyncState {
             hashCode = (hashCode &* 31) &+ Int(sentSyncState.rawValue)
          }
          if hasRecordBytesSize {
             hashCode = (hashCode &* 31) &+ recordBytesSize.hashValue
          }
          if hasRecordData {
             hashCode = (hashCode &* 31) &+ recordData.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoSyncDataMessageRequest"
  }
  override internal func className() -> String {
      return "ProtoSyncDataMessageRequest"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoSyncDataMessageRequest.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoSyncDataMessageRequest = ProtoSyncDataMessageRequest()
    internal func getMessage() -> ProtoSyncDataMessageRequest {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasRecordId:Bool {
         get {
              return builderResult.hasRecordId
         }
    }
    var recordId:String {
         get {
              return builderResult.recordId
         }
         set (value) {
             builderResult.hasRecordId = true
             builderResult.recordId = value
         }
    }
    func setRecordId(value:String) -> ProtoSyncDataMessageRequest.Builder {
      self.recordId = value
      return self
    }
    internal func clearRecordId() -> ProtoSyncDataMessageRequest.Builder{
         builderResult.hasRecordId = false
         builderResult.recordId = ""
         return self
    }
    var hasRecordHash:Bool {
         get {
              return builderResult.hasRecordHash
         }
    }
    var recordHash:String {
         get {
              return builderResult.recordHash
         }
         set (value) {
             builderResult.hasRecordHash = true
             builderResult.recordHash = value
         }
    }
    func setRecordHash(value:String) -> ProtoSyncDataMessageRequest.Builder {
      self.recordHash = value
      return self
    }
    internal func clearRecordHash() -> ProtoSyncDataMessageRequest.Builder{
         builderResult.hasRecordHash = false
         builderResult.recordHash = ""
         return self
    }
    var hasLastKnownPeerHash:Bool {
         get {
              return builderResult.hasLastKnownPeerHash
         }
    }
    var lastKnownPeerHash:String {
         get {
              return builderResult.lastKnownPeerHash
         }
         set (value) {
             builderResult.hasLastKnownPeerHash = true
             builderResult.lastKnownPeerHash = value
         }
    }
    func setLastKnownPeerHash(value:String) -> ProtoSyncDataMessageRequest.Builder {
      self.lastKnownPeerHash = value
      return self
    }
    internal func clearLastKnownPeerHash() -> ProtoSyncDataMessageRequest.Builder{
         builderResult.hasLastKnownPeerHash = false
         builderResult.lastKnownPeerHash = ""
         return self
    }
      var hasSentSyncState:Bool{
          get {
              return builderResult.hasSentSyncState
          }
      }
      var sentSyncState:SentSyncStateEnum {
          get {
              return builderResult.sentSyncState
          }
          set (value) {
              builderResult.hasSentSyncState = true
              builderResult.sentSyncState = value
          }
      }
      internal func setSentSyncState(value:SentSyncStateEnum) -> ProtoSyncDataMessageRequest.Builder {
        self.sentSyncState = value
        return self
      }
      internal func clearSentSyncState() -> ProtoSyncDataMessageRequest.Builder {
         builderResult.hasSentSyncState = false
         builderResult.sentSyncState = .PersistedNeverSentToPeer
         return self
      }
    var hasRecordBytesSize:Bool {
         get {
              return builderResult.hasRecordBytesSize
         }
    }
    var recordBytesSize:UInt32 {
         get {
              return builderResult.recordBytesSize
         }
         set (value) {
             builderResult.hasRecordBytesSize = true
             builderResult.recordBytesSize = value
         }
    }
    func setRecordBytesSize(value:UInt32) -> ProtoSyncDataMessageRequest.Builder {
      self.recordBytesSize = value
      return self
    }
    internal func clearRecordBytesSize() -> ProtoSyncDataMessageRequest.Builder{
         builderResult.hasRecordBytesSize = false
         builderResult.recordBytesSize = UInt32(0)
         return self
    }
    var hasRecordData:Bool {
         get {
              return builderResult.hasRecordData
         }
    }
    var recordData:NSData {
         get {
              return builderResult.recordData
         }
         set (value) {
             builderResult.hasRecordData = true
             builderResult.recordData = value
         }
    }
    func setRecordData(value:NSData) -> ProtoSyncDataMessageRequest.Builder {
      self.recordData = value
      return self
    }
    internal func clearRecordData() -> ProtoSyncDataMessageRequest.Builder{
         builderResult.hasRecordData = false
         builderResult.recordData = NSData()
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoSyncDataMessageRequest.Builder {
      builderResult = ProtoSyncDataMessageRequest()
      return self
    }
    internal override func clone() throws -> ProtoSyncDataMessageRequest.Builder {
      return try ProtoSyncDataMessageRequest.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoSyncDataMessageRequest {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoSyncDataMessageRequest {
      let returnMe:ProtoSyncDataMessageRequest = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoSyncDataMessageRequest) throws -> ProtoSyncDataMessageRequest.Builder {
      if other == ProtoSyncDataMessageRequest() {
       return self
      }
      if other.hasRecordId {
           recordId = other.recordId
      }
      if other.hasRecordHash {
           recordHash = other.recordHash
      }
      if other.hasLastKnownPeerHash {
           lastKnownPeerHash = other.lastKnownPeerHash
      }
      if other.hasSentSyncState {
           sentSyncState = other.sentSyncState
      }
      if other.hasRecordBytesSize {
           recordBytesSize = other.recordBytesSize
      }
      if other.hasRecordData {
           recordData = other.recordData
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoSyncDataMessageRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncDataMessageRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          recordId = try input.readString()

        case 18 :
          recordHash = try input.readString()

        case 26 :
          lastKnownPeerHash = try input.readString()

        case 32 :
          let valueIntsentSyncState = try input.readEnum()
          if let enumssentSyncState = SentSyncStateEnum(rawValue:valueIntsentSyncState){
               sentSyncState = enumssentSyncState
          } else {
               try unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntsentSyncState))
          }

        case 40 :
          recordBytesSize = try input.readUInt32()

        case 50 :
          recordData = try input.readData()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoSyncEntityMessageResponse : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasTransactionBindId:Bool = false
  private(set) var transactionBindId:String = ""

  private(set) var items:Array<ProtoSyncDataMessagesResponse>  = Array<ProtoSyncDataMessagesResponse>()
  private(set) var result:SyncEntityMessageResponseResult = SyncEntityMessageResponseResult.Ok
  private(set) var hasResult:Bool = false
  private(set) var hasResultMsg:Bool = false
  private(set) var resultMsg:String = ""

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasTransactionBindId {
      return false
    }
    if !hasResult {
      return false
    }
    if !hasResultMsg {
      return false
    }
    var isInititems:Bool = true
    for oneElementitems in items {
        if (!oneElementitems.isInitialized()) {
            isInititems = false
            break 
        }
    }
    if !isInititems {
     return isInititems
     }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasTransactionBindId {
      try output.writeString(1, value:transactionBindId)
    }
    for oneElementitems in items {
        try output.writeMessage(2, value:oneElementitems)
    }
    if hasResult {
      try output.writeEnum(3, value:result.rawValue)
    }
    if hasResultMsg {
      try output.writeString(4, value:resultMsg)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasTransactionBindId {
      serialize_size += transactionBindId.computeStringSize(1)
    }
    for oneElementitems in items {
        serialize_size += oneElementitems.computeMessageSize(2)
    }
    if (hasResult) {
      serialize_size += result.rawValue.computeEnumSize(3)
    }
    if hasResultMsg {
      serialize_size += resultMsg.computeStringSize(4)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoSyncEntityMessageResponse> {
    var mergedArray = Array<ProtoSyncEntityMessageResponse>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoSyncEntityMessageResponse? {
    return try ProtoSyncEntityMessageResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoSyncEntityMessageResponse {
    return try ProtoSyncEntityMessageResponse.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncEntityMessageResponse {
    return try ProtoSyncEntityMessageResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoSyncEntityMessageResponse {
    return try ProtoSyncEntityMessageResponse.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncEntityMessageResponse {
    return try ProtoSyncEntityMessageResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoSyncEntityMessageResponse {
    return try ProtoSyncEntityMessageResponse.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncEntityMessageResponse {
    return try ProtoSyncEntityMessageResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoSyncEntityMessageResponse.Builder {
    return ProtoSyncEntityMessageResponse.classBuilder() as! ProtoSyncEntityMessageResponse.Builder
  }
  internal func getBuilder() -> ProtoSyncEntityMessageResponse.Builder {
    return classBuilder() as! ProtoSyncEntityMessageResponse.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoSyncEntityMessageResponse.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoSyncEntityMessageResponse.Builder()
  }
  internal func toBuilder() throws -> ProtoSyncEntityMessageResponse.Builder {
    return try ProtoSyncEntityMessageResponse.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoSyncEntityMessageResponse) throws -> ProtoSyncEntityMessageResponse.Builder {
    return try ProtoSyncEntityMessageResponse.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasTransactionBindId {
      output += "\(indent) transactionBindId: \(transactionBindId) \n"
    }
    var itemsElementIndex:Int = 0
    for oneElementitems in items {
        output += "\(indent) items[\(itemsElementIndex)] {\n"
        try oneElementitems.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        itemsElementIndex++
    }
    if (hasResult) {
      output += "\(indent) result: \(result.rawValue)\n"
    }
    if hasResultMsg {
      output += "\(indent) resultMsg: \(resultMsg) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasTransactionBindId {
             hashCode = (hashCode &* 31) &+ transactionBindId.hashValue
          }
          for oneElementitems in items {
              hashCode = (hashCode &* 31) &+ oneElementitems.hashValue
          }
          if hasResult {
             hashCode = (hashCode &* 31) &+ Int(result.rawValue)
          }
          if hasResultMsg {
             hashCode = (hashCode &* 31) &+ resultMsg.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoSyncEntityMessageResponse"
  }
  override internal func className() -> String {
      return "ProtoSyncEntityMessageResponse"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoSyncEntityMessageResponse.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoSyncEntityMessageResponse = ProtoSyncEntityMessageResponse()
    internal func getMessage() -> ProtoSyncEntityMessageResponse {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasTransactionBindId:Bool {
         get {
              return builderResult.hasTransactionBindId
         }
    }
    var transactionBindId:String {
         get {
              return builderResult.transactionBindId
         }
         set (value) {
             builderResult.hasTransactionBindId = true
             builderResult.transactionBindId = value
         }
    }
    func setTransactionBindId(value:String) -> ProtoSyncEntityMessageResponse.Builder {
      self.transactionBindId = value
      return self
    }
    internal func clearTransactionBindId() -> ProtoSyncEntityMessageResponse.Builder{
         builderResult.hasTransactionBindId = false
         builderResult.transactionBindId = ""
         return self
    }
    var items:Array<ProtoSyncDataMessagesResponse> {
         get {
             return builderResult.items
         }
         set (value) {
             builderResult.items = value
         }
    }
    func setItems(value:Array<ProtoSyncDataMessagesResponse>) -> ProtoSyncEntityMessageResponse.Builder {
      self.items = value
      return self
    }
    internal func clearItems() -> ProtoSyncEntityMessageResponse.Builder {
      builderResult.items.removeAll(keepCapacity: false)
      return self
    }
      var hasResult:Bool{
          get {
              return builderResult.hasResult
          }
      }
      var result:SyncEntityMessageResponseResult {
          get {
              return builderResult.result
          }
          set (value) {
              builderResult.hasResult = true
              builderResult.result = value
          }
      }
      internal func setResult(value:SyncEntityMessageResponseResult) -> ProtoSyncEntityMessageResponse.Builder {
        self.result = value
        return self
      }
      internal func clearResult() -> ProtoSyncEntityMessageResponse.Builder {
         builderResult.hasResult = false
         builderResult.result = .Ok
         return self
      }
    var hasResultMsg:Bool {
         get {
              return builderResult.hasResultMsg
         }
    }
    var resultMsg:String {
         get {
              return builderResult.resultMsg
         }
         set (value) {
             builderResult.hasResultMsg = true
             builderResult.resultMsg = value
         }
    }
    func setResultMsg(value:String) -> ProtoSyncEntityMessageResponse.Builder {
      self.resultMsg = value
      return self
    }
    internal func clearResultMsg() -> ProtoSyncEntityMessageResponse.Builder{
         builderResult.hasResultMsg = false
         builderResult.resultMsg = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoSyncEntityMessageResponse.Builder {
      builderResult = ProtoSyncEntityMessageResponse()
      return self
    }
    internal override func clone() throws -> ProtoSyncEntityMessageResponse.Builder {
      return try ProtoSyncEntityMessageResponse.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoSyncEntityMessageResponse {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoSyncEntityMessageResponse {
      let returnMe:ProtoSyncEntityMessageResponse = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoSyncEntityMessageResponse) throws -> ProtoSyncEntityMessageResponse.Builder {
      if other == ProtoSyncEntityMessageResponse() {
       return self
      }
      if other.hasTransactionBindId {
           transactionBindId = other.transactionBindId
      }
      if !other.items.isEmpty  {
         builderResult.items += other.items
      }
      if other.hasResult {
           result = other.result
      }
      if other.hasResultMsg {
           resultMsg = other.resultMsg
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoSyncEntityMessageResponse.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncEntityMessageResponse.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          transactionBindId = try input.readString()

        case 18 :
          let subBuilder = ProtoSyncDataMessagesResponse.Builder()
          try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          items += [subBuilder.buildPartial()]

        case 24 :
          let valueIntresult = try input.readEnum()
          if let enumsresult = SyncEntityMessageResponseResult(rawValue:valueIntresult){
               result = enumsresult
          } else {
               try unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntresult))
          }

        case 34 :
          resultMsg = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoSyncDataMessagesResponse : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasEntityPluralName:Bool = false
  private(set) var entityPluralName:String = ""

  private(set) var msgs:Array<ProtoSyncDataMessageResponse>  = Array<ProtoSyncDataMessageResponse>()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasEntityPluralName {
      return false
    }
    var isInitmsgs:Bool = true
    for oneElementmsgs in msgs {
        if (!oneElementmsgs.isInitialized()) {
            isInitmsgs = false
            break 
        }
    }
    if !isInitmsgs {
     return isInitmsgs
     }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasEntityPluralName {
      try output.writeString(1, value:entityPluralName)
    }
    for oneElementmsgs in msgs {
        try output.writeMessage(2, value:oneElementmsgs)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasEntityPluralName {
      serialize_size += entityPluralName.computeStringSize(1)
    }
    for oneElementmsgs in msgs {
        serialize_size += oneElementmsgs.computeMessageSize(2)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoSyncDataMessagesResponse> {
    var mergedArray = Array<ProtoSyncDataMessagesResponse>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoSyncDataMessagesResponse? {
    return try ProtoSyncDataMessagesResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoSyncDataMessagesResponse {
    return try ProtoSyncDataMessagesResponse.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncDataMessagesResponse {
    return try ProtoSyncDataMessagesResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoSyncDataMessagesResponse {
    return try ProtoSyncDataMessagesResponse.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncDataMessagesResponse {
    return try ProtoSyncDataMessagesResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoSyncDataMessagesResponse {
    return try ProtoSyncDataMessagesResponse.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncDataMessagesResponse {
    return try ProtoSyncDataMessagesResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoSyncDataMessagesResponse.Builder {
    return ProtoSyncDataMessagesResponse.classBuilder() as! ProtoSyncDataMessagesResponse.Builder
  }
  internal func getBuilder() -> ProtoSyncDataMessagesResponse.Builder {
    return classBuilder() as! ProtoSyncDataMessagesResponse.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoSyncDataMessagesResponse.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoSyncDataMessagesResponse.Builder()
  }
  internal func toBuilder() throws -> ProtoSyncDataMessagesResponse.Builder {
    return try ProtoSyncDataMessagesResponse.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoSyncDataMessagesResponse) throws -> ProtoSyncDataMessagesResponse.Builder {
    return try ProtoSyncDataMessagesResponse.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasEntityPluralName {
      output += "\(indent) entityPluralName: \(entityPluralName) \n"
    }
    var msgsElementIndex:Int = 0
    for oneElementmsgs in msgs {
        output += "\(indent) msgs[\(msgsElementIndex)] {\n"
        try oneElementmsgs.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        msgsElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasEntityPluralName {
             hashCode = (hashCode &* 31) &+ entityPluralName.hashValue
          }
          for oneElementmsgs in msgs {
              hashCode = (hashCode &* 31) &+ oneElementmsgs.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoSyncDataMessagesResponse"
  }
  override internal func className() -> String {
      return "ProtoSyncDataMessagesResponse"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoSyncDataMessagesResponse.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoSyncDataMessagesResponse = ProtoSyncDataMessagesResponse()
    internal func getMessage() -> ProtoSyncDataMessagesResponse {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasEntityPluralName:Bool {
         get {
              return builderResult.hasEntityPluralName
         }
    }
    var entityPluralName:String {
         get {
              return builderResult.entityPluralName
         }
         set (value) {
             builderResult.hasEntityPluralName = true
             builderResult.entityPluralName = value
         }
    }
    func setEntityPluralName(value:String) -> ProtoSyncDataMessagesResponse.Builder {
      self.entityPluralName = value
      return self
    }
    internal func clearEntityPluralName() -> ProtoSyncDataMessagesResponse.Builder{
         builderResult.hasEntityPluralName = false
         builderResult.entityPluralName = ""
         return self
    }
    var msgs:Array<ProtoSyncDataMessageResponse> {
         get {
             return builderResult.msgs
         }
         set (value) {
             builderResult.msgs = value
         }
    }
    func setMsgs(value:Array<ProtoSyncDataMessageResponse>) -> ProtoSyncDataMessagesResponse.Builder {
      self.msgs = value
      return self
    }
    internal func clearMsgs() -> ProtoSyncDataMessagesResponse.Builder {
      builderResult.msgs.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoSyncDataMessagesResponse.Builder {
      builderResult = ProtoSyncDataMessagesResponse()
      return self
    }
    internal override func clone() throws -> ProtoSyncDataMessagesResponse.Builder {
      return try ProtoSyncDataMessagesResponse.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoSyncDataMessagesResponse {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoSyncDataMessagesResponse {
      let returnMe:ProtoSyncDataMessagesResponse = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoSyncDataMessagesResponse) throws -> ProtoSyncDataMessagesResponse.Builder {
      if other == ProtoSyncDataMessagesResponse() {
       return self
      }
      if other.hasEntityPluralName {
           entityPluralName = other.entityPluralName
      }
      if !other.msgs.isEmpty  {
         builderResult.msgs += other.msgs
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoSyncDataMessagesResponse.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncDataMessagesResponse.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          entityPluralName = try input.readString()

        case 18 :
          let subBuilder = ProtoSyncDataMessageResponse.Builder()
          try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          msgs += [subBuilder.buildPartial()]

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoSyncDataMessageResponse : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasRecordId:Bool = false
  private(set) var recordId:String = ""

  private(set) var hasRequestHash:Bool = false
  private(set) var requestHash:String = ""

  private(set) var hasResponseHash:Bool = false
  private(set) var responseHash:String = ""

  private(set) var syncState:AckSyncStateEnum = AckSyncStateEnum.AckFastBatch
  private(set) var hasSyncState:Bool = false
  private(set) var hasRecordBytesSize:Bool = false
  private(set) var recordBytesSize:UInt32 = UInt32(0)

  private(set) var hasRecordData:Bool = false
  private(set) var recordData:NSData = NSData()

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasRecordId {
      return false
    }
    if !hasResponseHash {
      return false
    }
    if !hasSyncState {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasRecordId {
      try output.writeString(1, value:recordId)
    }
    if hasRequestHash {
      try output.writeString(2, value:requestHash)
    }
    if hasResponseHash {
      try output.writeString(3, value:responseHash)
    }
    if hasSyncState {
      try output.writeEnum(4, value:syncState.rawValue)
    }
    if hasRecordBytesSize {
      try output.writeUInt32(5, value:recordBytesSize)
    }
    if hasRecordData {
      try output.writeData(6, value:recordData)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasRecordId {
      serialize_size += recordId.computeStringSize(1)
    }
    if hasRequestHash {
      serialize_size += requestHash.computeStringSize(2)
    }
    if hasResponseHash {
      serialize_size += responseHash.computeStringSize(3)
    }
    if (hasSyncState) {
      serialize_size += syncState.rawValue.computeEnumSize(4)
    }
    if hasRecordBytesSize {
      serialize_size += recordBytesSize.computeUInt32Size(5)
    }
    if hasRecordData {
      serialize_size += recordData.computeDataSize(6)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoSyncDataMessageResponse> {
    var mergedArray = Array<ProtoSyncDataMessageResponse>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoSyncDataMessageResponse? {
    return try ProtoSyncDataMessageResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoSyncDataMessageResponse {
    return try ProtoSyncDataMessageResponse.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncDataMessageResponse {
    return try ProtoSyncDataMessageResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoSyncDataMessageResponse {
    return try ProtoSyncDataMessageResponse.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncDataMessageResponse {
    return try ProtoSyncDataMessageResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoSyncDataMessageResponse {
    return try ProtoSyncDataMessageResponse.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncDataMessageResponse {
    return try ProtoSyncDataMessageResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoSyncDataMessageResponse.Builder {
    return ProtoSyncDataMessageResponse.classBuilder() as! ProtoSyncDataMessageResponse.Builder
  }
  internal func getBuilder() -> ProtoSyncDataMessageResponse.Builder {
    return classBuilder() as! ProtoSyncDataMessageResponse.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoSyncDataMessageResponse.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoSyncDataMessageResponse.Builder()
  }
  internal func toBuilder() throws -> ProtoSyncDataMessageResponse.Builder {
    return try ProtoSyncDataMessageResponse.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoSyncDataMessageResponse) throws -> ProtoSyncDataMessageResponse.Builder {
    return try ProtoSyncDataMessageResponse.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasRecordId {
      output += "\(indent) recordId: \(recordId) \n"
    }
    if hasRequestHash {
      output += "\(indent) requestHash: \(requestHash) \n"
    }
    if hasResponseHash {
      output += "\(indent) responseHash: \(responseHash) \n"
    }
    if (hasSyncState) {
      output += "\(indent) syncState: \(syncState.rawValue)\n"
    }
    if hasRecordBytesSize {
      output += "\(indent) recordBytesSize: \(recordBytesSize) \n"
    }
    if hasRecordData {
      output += "\(indent) recordData: \(recordData) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasRecordId {
             hashCode = (hashCode &* 31) &+ recordId.hashValue
          }
          if hasRequestHash {
             hashCode = (hashCode &* 31) &+ requestHash.hashValue
          }
          if hasResponseHash {
             hashCode = (hashCode &* 31) &+ responseHash.hashValue
          }
          if hasSyncState {
             hashCode = (hashCode &* 31) &+ Int(syncState.rawValue)
          }
          if hasRecordBytesSize {
             hashCode = (hashCode &* 31) &+ recordBytesSize.hashValue
          }
          if hasRecordData {
             hashCode = (hashCode &* 31) &+ recordData.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoSyncDataMessageResponse"
  }
  override internal func className() -> String {
      return "ProtoSyncDataMessageResponse"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoSyncDataMessageResponse.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoSyncDataMessageResponse = ProtoSyncDataMessageResponse()
    internal func getMessage() -> ProtoSyncDataMessageResponse {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasRecordId:Bool {
         get {
              return builderResult.hasRecordId
         }
    }
    var recordId:String {
         get {
              return builderResult.recordId
         }
         set (value) {
             builderResult.hasRecordId = true
             builderResult.recordId = value
         }
    }
    func setRecordId(value:String) -> ProtoSyncDataMessageResponse.Builder {
      self.recordId = value
      return self
    }
    internal func clearRecordId() -> ProtoSyncDataMessageResponse.Builder{
         builderResult.hasRecordId = false
         builderResult.recordId = ""
         return self
    }
    var hasRequestHash:Bool {
         get {
              return builderResult.hasRequestHash
         }
    }
    var requestHash:String {
         get {
              return builderResult.requestHash
         }
         set (value) {
             builderResult.hasRequestHash = true
             builderResult.requestHash = value
         }
    }
    func setRequestHash(value:String) -> ProtoSyncDataMessageResponse.Builder {
      self.requestHash = value
      return self
    }
    internal func clearRequestHash() -> ProtoSyncDataMessageResponse.Builder{
         builderResult.hasRequestHash = false
         builderResult.requestHash = ""
         return self
    }
    var hasResponseHash:Bool {
         get {
              return builderResult.hasResponseHash
         }
    }
    var responseHash:String {
         get {
              return builderResult.responseHash
         }
         set (value) {
             builderResult.hasResponseHash = true
             builderResult.responseHash = value
         }
    }
    func setResponseHash(value:String) -> ProtoSyncDataMessageResponse.Builder {
      self.responseHash = value
      return self
    }
    internal func clearResponseHash() -> ProtoSyncDataMessageResponse.Builder{
         builderResult.hasResponseHash = false
         builderResult.responseHash = ""
         return self
    }
      var hasSyncState:Bool{
          get {
              return builderResult.hasSyncState
          }
      }
      var syncState:AckSyncStateEnum {
          get {
              return builderResult.syncState
          }
          set (value) {
              builderResult.hasSyncState = true
              builderResult.syncState = value
          }
      }
      internal func setSyncState(value:AckSyncStateEnum) -> ProtoSyncDataMessageResponse.Builder {
        self.syncState = value
        return self
      }
      internal func clearSyncState() -> ProtoSyncDataMessageResponse.Builder {
         builderResult.hasSyncState = false
         builderResult.syncState = .AckFastBatch
         return self
      }
    var hasRecordBytesSize:Bool {
         get {
              return builderResult.hasRecordBytesSize
         }
    }
    var recordBytesSize:UInt32 {
         get {
              return builderResult.recordBytesSize
         }
         set (value) {
             builderResult.hasRecordBytesSize = true
             builderResult.recordBytesSize = value
         }
    }
    func setRecordBytesSize(value:UInt32) -> ProtoSyncDataMessageResponse.Builder {
      self.recordBytesSize = value
      return self
    }
    internal func clearRecordBytesSize() -> ProtoSyncDataMessageResponse.Builder{
         builderResult.hasRecordBytesSize = false
         builderResult.recordBytesSize = UInt32(0)
         return self
    }
    var hasRecordData:Bool {
         get {
              return builderResult.hasRecordData
         }
    }
    var recordData:NSData {
         get {
              return builderResult.recordData
         }
         set (value) {
             builderResult.hasRecordData = true
             builderResult.recordData = value
         }
    }
    func setRecordData(value:NSData) -> ProtoSyncDataMessageResponse.Builder {
      self.recordData = value
      return self
    }
    internal func clearRecordData() -> ProtoSyncDataMessageResponse.Builder{
         builderResult.hasRecordData = false
         builderResult.recordData = NSData()
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoSyncDataMessageResponse.Builder {
      builderResult = ProtoSyncDataMessageResponse()
      return self
    }
    internal override func clone() throws -> ProtoSyncDataMessageResponse.Builder {
      return try ProtoSyncDataMessageResponse.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoSyncDataMessageResponse {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoSyncDataMessageResponse {
      let returnMe:ProtoSyncDataMessageResponse = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoSyncDataMessageResponse) throws -> ProtoSyncDataMessageResponse.Builder {
      if other == ProtoSyncDataMessageResponse() {
       return self
      }
      if other.hasRecordId {
           recordId = other.recordId
      }
      if other.hasRequestHash {
           requestHash = other.requestHash
      }
      if other.hasResponseHash {
           responseHash = other.responseHash
      }
      if other.hasSyncState {
           syncState = other.syncState
      }
      if other.hasRecordBytesSize {
           recordBytesSize = other.recordBytesSize
      }
      if other.hasRecordData {
           recordData = other.recordData
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoSyncDataMessageResponse.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoSyncDataMessageResponse.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          recordId = try input.readString()

        case 18 :
          requestHash = try input.readString()

        case 26 :
          responseHash = try input.readString()

        case 32 :
          let valueIntsyncState = try input.readEnum()
          if let enumssyncState = AckSyncStateEnum(rawValue:valueIntsyncState){
               syncState = enumssyncState
          } else {
               try unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntsyncState))
          }

        case 40 :
          recordBytesSize = try input.readUInt32()

        case 50 :
          recordData = try input.readData()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoRecord : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var fields:Array<ProtoField>  = Array<ProtoField>()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    var isInitfields:Bool = true
    for oneElementfields in fields {
        if (!oneElementfields.isInitialized()) {
            isInitfields = false
            break 
        }
    }
    if !isInitfields {
     return isInitfields
     }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    for oneElementfields in fields {
        try output.writeMessage(1, value:oneElementfields)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    for oneElementfields in fields {
        serialize_size += oneElementfields.computeMessageSize(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoRecord> {
    var mergedArray = Array<ProtoRecord>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoRecord? {
    return try ProtoRecord.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoRecord {
    return try ProtoRecord.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoRecord {
    return try ProtoRecord.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoRecord {
    return try ProtoRecord.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoRecord {
    return try ProtoRecord.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoRecord {
    return try ProtoRecord.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoRecord {
    return try ProtoRecord.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoRecord.Builder {
    return ProtoRecord.classBuilder() as! ProtoRecord.Builder
  }
  internal func getBuilder() -> ProtoRecord.Builder {
    return classBuilder() as! ProtoRecord.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoRecord.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoRecord.Builder()
  }
  internal func toBuilder() throws -> ProtoRecord.Builder {
    return try ProtoRecord.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoRecord) throws -> ProtoRecord.Builder {
    return try ProtoRecord.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    var fieldsElementIndex:Int = 0
    for oneElementfields in fields {
        output += "\(indent) fields[\(fieldsElementIndex)] {\n"
        try oneElementfields.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        fieldsElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          for oneElementfields in fields {
              hashCode = (hashCode &* 31) &+ oneElementfields.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoRecord"
  }
  override internal func className() -> String {
      return "ProtoRecord"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoRecord.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoRecord = ProtoRecord()
    internal func getMessage() -> ProtoRecord {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var fields:Array<ProtoField> {
         get {
             return builderResult.fields
         }
         set (value) {
             builderResult.fields = value
         }
    }
    func setFields(value:Array<ProtoField>) -> ProtoRecord.Builder {
      self.fields = value
      return self
    }
    internal func clearFields() -> ProtoRecord.Builder {
      builderResult.fields.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoRecord.Builder {
      builderResult = ProtoRecord()
      return self
    }
    internal override func clone() throws -> ProtoRecord.Builder {
      return try ProtoRecord.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoRecord {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoRecord {
      let returnMe:ProtoRecord = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoRecord) throws -> ProtoRecord.Builder {
      if other == ProtoRecord() {
       return self
      }
      if !other.fields.isEmpty  {
         builderResult.fields += other.fields
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoRecord.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoRecord.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          let subBuilder = ProtoField.Builder()
          try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          fields += [subBuilder.buildPartial()]

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoField : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var encodedFieldType:ProtoEncodedFieldType = ProtoEncodedFieldType.Double
  private(set) var hasEncodedFieldType:Bool = false
  private(set) var hasFieldName:Bool = false
  private(set) var fieldName:String = ""

  private(set) var hasFieldValue:Bool = false
  private(set) var fieldValue:NSData = NSData()

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasEncodedFieldType {
      return false
    }
    if !hasFieldName {
      return false
    }
    if !hasFieldValue {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasEncodedFieldType {
      try output.writeEnum(1, value:encodedFieldType.rawValue)
    }
    if hasFieldName {
      try output.writeString(2, value:fieldName)
    }
    if hasFieldValue {
      try output.writeData(3, value:fieldValue)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if (hasEncodedFieldType) {
      serialize_size += encodedFieldType.rawValue.computeEnumSize(1)
    }
    if hasFieldName {
      serialize_size += fieldName.computeStringSize(2)
    }
    if hasFieldValue {
      serialize_size += fieldValue.computeDataSize(3)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoField> {
    var mergedArray = Array<ProtoField>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoField? {
    return try ProtoField.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoField {
    return try ProtoField.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoField {
    return try ProtoField.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoField {
    return try ProtoField.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoField {
    return try ProtoField.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoField {
    return try ProtoField.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoField {
    return try ProtoField.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoField.Builder {
    return ProtoField.classBuilder() as! ProtoField.Builder
  }
  internal func getBuilder() -> ProtoField.Builder {
    return classBuilder() as! ProtoField.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoField.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoField.Builder()
  }
  internal func toBuilder() throws -> ProtoField.Builder {
    return try ProtoField.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoField) throws -> ProtoField.Builder {
    return try ProtoField.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if (hasEncodedFieldType) {
      output += "\(indent) encodedFieldType: \(encodedFieldType.rawValue)\n"
    }
    if hasFieldName {
      output += "\(indent) fieldName: \(fieldName) \n"
    }
    if hasFieldValue {
      output += "\(indent) fieldValue: \(fieldValue) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasEncodedFieldType {
             hashCode = (hashCode &* 31) &+ Int(encodedFieldType.rawValue)
          }
          if hasFieldName {
             hashCode = (hashCode &* 31) &+ fieldName.hashValue
          }
          if hasFieldValue {
             hashCode = (hashCode &* 31) &+ fieldValue.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoField"
  }
  override internal func className() -> String {
      return "ProtoField"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoField.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoField = ProtoField()
    internal func getMessage() -> ProtoField {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
      var hasEncodedFieldType:Bool{
          get {
              return builderResult.hasEncodedFieldType
          }
      }
      var encodedFieldType:ProtoEncodedFieldType {
          get {
              return builderResult.encodedFieldType
          }
          set (value) {
              builderResult.hasEncodedFieldType = true
              builderResult.encodedFieldType = value
          }
      }
      internal func setEncodedFieldType(value:ProtoEncodedFieldType) -> ProtoField.Builder {
        self.encodedFieldType = value
        return self
      }
      internal func clearEncodedFieldType() -> ProtoField.Builder {
         builderResult.hasEncodedFieldType = false
         builderResult.encodedFieldType = .Double
         return self
      }
    var hasFieldName:Bool {
         get {
              return builderResult.hasFieldName
         }
    }
    var fieldName:String {
         get {
              return builderResult.fieldName
         }
         set (value) {
             builderResult.hasFieldName = true
             builderResult.fieldName = value
         }
    }
    func setFieldName(value:String) -> ProtoField.Builder {
      self.fieldName = value
      return self
    }
    internal func clearFieldName() -> ProtoField.Builder{
         builderResult.hasFieldName = false
         builderResult.fieldName = ""
         return self
    }
    var hasFieldValue:Bool {
         get {
              return builderResult.hasFieldValue
         }
    }
    var fieldValue:NSData {
         get {
              return builderResult.fieldValue
         }
         set (value) {
             builderResult.hasFieldValue = true
             builderResult.fieldValue = value
         }
    }
    func setFieldValue(value:NSData) -> ProtoField.Builder {
      self.fieldValue = value
      return self
    }
    internal func clearFieldValue() -> ProtoField.Builder{
         builderResult.hasFieldValue = false
         builderResult.fieldValue = NSData()
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoField.Builder {
      builderResult = ProtoField()
      return self
    }
    internal override func clone() throws -> ProtoField.Builder {
      return try ProtoField.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoField {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoField {
      let returnMe:ProtoField = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoField) throws -> ProtoField.Builder {
      if other == ProtoField() {
       return self
      }
      if other.hasEncodedFieldType {
           encodedFieldType = other.encodedFieldType
      }
      if other.hasFieldName {
           fieldName = other.fieldName
      }
      if other.hasFieldValue {
           fieldValue = other.fieldValue
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoField.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoField.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntencodedFieldType = try input.readEnum()
          if let enumsencodedFieldType = ProtoEncodedFieldType(rawValue:valueIntencodedFieldType){
               encodedFieldType = enumsencodedFieldType
          } else {
               try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntencodedFieldType))
          }

        case 18 :
          fieldName = try input.readString()

        case 26 :
          fieldValue = try input.readData()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoFieldTypeDouble : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasFieldValue:Bool = false
  private(set) var fieldValue:Double = Double(0)

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasFieldValue {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasFieldValue {
      try output.writeDouble(1, value:fieldValue)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasFieldValue {
      serialize_size += fieldValue.computeDoubleSize(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoFieldTypeDouble> {
    var mergedArray = Array<ProtoFieldTypeDouble>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeDouble? {
    return try ProtoFieldTypeDouble.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoFieldTypeDouble {
    return try ProtoFieldTypeDouble.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeDouble {
    return try ProtoFieldTypeDouble.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeDouble {
    return try ProtoFieldTypeDouble.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeDouble {
    return try ProtoFieldTypeDouble.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeDouble {
    return try ProtoFieldTypeDouble.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeDouble {
    return try ProtoFieldTypeDouble.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoFieldTypeDouble.Builder {
    return ProtoFieldTypeDouble.classBuilder() as! ProtoFieldTypeDouble.Builder
  }
  internal func getBuilder() -> ProtoFieldTypeDouble.Builder {
    return classBuilder() as! ProtoFieldTypeDouble.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeDouble.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeDouble.Builder()
  }
  internal func toBuilder() throws -> ProtoFieldTypeDouble.Builder {
    return try ProtoFieldTypeDouble.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoFieldTypeDouble) throws -> ProtoFieldTypeDouble.Builder {
    return try ProtoFieldTypeDouble.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasFieldValue {
      output += "\(indent) fieldValue: \(fieldValue) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFieldValue {
             hashCode = (hashCode &* 31) &+ fieldValue.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoFieldTypeDouble"
  }
  override internal func className() -> String {
      return "ProtoFieldTypeDouble"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoFieldTypeDouble.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoFieldTypeDouble = ProtoFieldTypeDouble()
    internal func getMessage() -> ProtoFieldTypeDouble {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasFieldValue:Bool {
         get {
              return builderResult.hasFieldValue
         }
    }
    var fieldValue:Double {
         get {
              return builderResult.fieldValue
         }
         set (value) {
             builderResult.hasFieldValue = true
             builderResult.fieldValue = value
         }
    }
    func setFieldValue(value:Double) -> ProtoFieldTypeDouble.Builder {
      self.fieldValue = value
      return self
    }
    internal func clearFieldValue() -> ProtoFieldTypeDouble.Builder{
         builderResult.hasFieldValue = false
         builderResult.fieldValue = Double(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoFieldTypeDouble.Builder {
      builderResult = ProtoFieldTypeDouble()
      return self
    }
    internal override func clone() throws -> ProtoFieldTypeDouble.Builder {
      return try ProtoFieldTypeDouble.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoFieldTypeDouble {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoFieldTypeDouble {
      let returnMe:ProtoFieldTypeDouble = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoFieldTypeDouble) throws -> ProtoFieldTypeDouble.Builder {
      if other == ProtoFieldTypeDouble() {
       return self
      }
      if other.hasFieldValue {
           fieldValue = other.fieldValue
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeDouble.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeDouble.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 9 :
          fieldValue = try input.readDouble()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoFieldTypeFloat : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasFieldValue:Bool = false
  private(set) var fieldValue:Float = Float(0)

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasFieldValue {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasFieldValue {
      try output.writeFloat(1, value:fieldValue)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasFieldValue {
      serialize_size += fieldValue.computeFloatSize(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoFieldTypeFloat> {
    var mergedArray = Array<ProtoFieldTypeFloat>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeFloat? {
    return try ProtoFieldTypeFloat.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoFieldTypeFloat {
    return try ProtoFieldTypeFloat.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeFloat {
    return try ProtoFieldTypeFloat.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeFloat {
    return try ProtoFieldTypeFloat.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeFloat {
    return try ProtoFieldTypeFloat.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeFloat {
    return try ProtoFieldTypeFloat.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeFloat {
    return try ProtoFieldTypeFloat.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoFieldTypeFloat.Builder {
    return ProtoFieldTypeFloat.classBuilder() as! ProtoFieldTypeFloat.Builder
  }
  internal func getBuilder() -> ProtoFieldTypeFloat.Builder {
    return classBuilder() as! ProtoFieldTypeFloat.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeFloat.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeFloat.Builder()
  }
  internal func toBuilder() throws -> ProtoFieldTypeFloat.Builder {
    return try ProtoFieldTypeFloat.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoFieldTypeFloat) throws -> ProtoFieldTypeFloat.Builder {
    return try ProtoFieldTypeFloat.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasFieldValue {
      output += "\(indent) fieldValue: \(fieldValue) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFieldValue {
             hashCode = (hashCode &* 31) &+ fieldValue.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoFieldTypeFloat"
  }
  override internal func className() -> String {
      return "ProtoFieldTypeFloat"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoFieldTypeFloat.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoFieldTypeFloat = ProtoFieldTypeFloat()
    internal func getMessage() -> ProtoFieldTypeFloat {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasFieldValue:Bool {
         get {
              return builderResult.hasFieldValue
         }
    }
    var fieldValue:Float {
         get {
              return builderResult.fieldValue
         }
         set (value) {
             builderResult.hasFieldValue = true
             builderResult.fieldValue = value
         }
    }
    func setFieldValue(value:Float) -> ProtoFieldTypeFloat.Builder {
      self.fieldValue = value
      return self
    }
    internal func clearFieldValue() -> ProtoFieldTypeFloat.Builder{
         builderResult.hasFieldValue = false
         builderResult.fieldValue = Float(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoFieldTypeFloat.Builder {
      builderResult = ProtoFieldTypeFloat()
      return self
    }
    internal override func clone() throws -> ProtoFieldTypeFloat.Builder {
      return try ProtoFieldTypeFloat.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoFieldTypeFloat {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoFieldTypeFloat {
      let returnMe:ProtoFieldTypeFloat = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoFieldTypeFloat) throws -> ProtoFieldTypeFloat.Builder {
      if other == ProtoFieldTypeFloat() {
       return self
      }
      if other.hasFieldValue {
           fieldValue = other.fieldValue
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeFloat.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeFloat.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 13 :
          fieldValue = try input.readFloat()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoFieldTypeInt32 : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasFieldValue:Bool = false
  private(set) var fieldValue:Int32 = Int32(0)

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasFieldValue {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasFieldValue {
      try output.writeInt32(1, value:fieldValue)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasFieldValue {
      serialize_size += fieldValue.computeInt32Size(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoFieldTypeInt32> {
    var mergedArray = Array<ProtoFieldTypeInt32>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeInt32? {
    return try ProtoFieldTypeInt32.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoFieldTypeInt32 {
    return try ProtoFieldTypeInt32.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeInt32 {
    return try ProtoFieldTypeInt32.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeInt32 {
    return try ProtoFieldTypeInt32.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeInt32 {
    return try ProtoFieldTypeInt32.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeInt32 {
    return try ProtoFieldTypeInt32.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeInt32 {
    return try ProtoFieldTypeInt32.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoFieldTypeInt32.Builder {
    return ProtoFieldTypeInt32.classBuilder() as! ProtoFieldTypeInt32.Builder
  }
  internal func getBuilder() -> ProtoFieldTypeInt32.Builder {
    return classBuilder() as! ProtoFieldTypeInt32.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeInt32.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeInt32.Builder()
  }
  internal func toBuilder() throws -> ProtoFieldTypeInt32.Builder {
    return try ProtoFieldTypeInt32.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoFieldTypeInt32) throws -> ProtoFieldTypeInt32.Builder {
    return try ProtoFieldTypeInt32.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasFieldValue {
      output += "\(indent) fieldValue: \(fieldValue) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFieldValue {
             hashCode = (hashCode &* 31) &+ fieldValue.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoFieldTypeInt32"
  }
  override internal func className() -> String {
      return "ProtoFieldTypeInt32"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoFieldTypeInt32.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoFieldTypeInt32 = ProtoFieldTypeInt32()
    internal func getMessage() -> ProtoFieldTypeInt32 {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasFieldValue:Bool {
         get {
              return builderResult.hasFieldValue
         }
    }
    var fieldValue:Int32 {
         get {
              return builderResult.fieldValue
         }
         set (value) {
             builderResult.hasFieldValue = true
             builderResult.fieldValue = value
         }
    }
    func setFieldValue(value:Int32) -> ProtoFieldTypeInt32.Builder {
      self.fieldValue = value
      return self
    }
    internal func clearFieldValue() -> ProtoFieldTypeInt32.Builder{
         builderResult.hasFieldValue = false
         builderResult.fieldValue = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoFieldTypeInt32.Builder {
      builderResult = ProtoFieldTypeInt32()
      return self
    }
    internal override func clone() throws -> ProtoFieldTypeInt32.Builder {
      return try ProtoFieldTypeInt32.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoFieldTypeInt32 {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoFieldTypeInt32 {
      let returnMe:ProtoFieldTypeInt32 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoFieldTypeInt32) throws -> ProtoFieldTypeInt32.Builder {
      if other == ProtoFieldTypeInt32() {
       return self
      }
      if other.hasFieldValue {
           fieldValue = other.fieldValue
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeInt32.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeInt32.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          fieldValue = try input.readInt32()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoFieldTypeInt64 : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasFieldValue:Bool = false
  private(set) var fieldValue:Int64 = Int64(0)

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasFieldValue {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasFieldValue {
      try output.writeInt64(1, value:fieldValue)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasFieldValue {
      serialize_size += fieldValue.computeInt64Size(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoFieldTypeInt64> {
    var mergedArray = Array<ProtoFieldTypeInt64>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeInt64? {
    return try ProtoFieldTypeInt64.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoFieldTypeInt64 {
    return try ProtoFieldTypeInt64.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeInt64 {
    return try ProtoFieldTypeInt64.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeInt64 {
    return try ProtoFieldTypeInt64.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeInt64 {
    return try ProtoFieldTypeInt64.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeInt64 {
    return try ProtoFieldTypeInt64.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeInt64 {
    return try ProtoFieldTypeInt64.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoFieldTypeInt64.Builder {
    return ProtoFieldTypeInt64.classBuilder() as! ProtoFieldTypeInt64.Builder
  }
  internal func getBuilder() -> ProtoFieldTypeInt64.Builder {
    return classBuilder() as! ProtoFieldTypeInt64.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeInt64.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeInt64.Builder()
  }
  internal func toBuilder() throws -> ProtoFieldTypeInt64.Builder {
    return try ProtoFieldTypeInt64.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoFieldTypeInt64) throws -> ProtoFieldTypeInt64.Builder {
    return try ProtoFieldTypeInt64.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasFieldValue {
      output += "\(indent) fieldValue: \(fieldValue) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFieldValue {
             hashCode = (hashCode &* 31) &+ fieldValue.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoFieldTypeInt64"
  }
  override internal func className() -> String {
      return "ProtoFieldTypeInt64"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoFieldTypeInt64.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoFieldTypeInt64 = ProtoFieldTypeInt64()
    internal func getMessage() -> ProtoFieldTypeInt64 {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasFieldValue:Bool {
         get {
              return builderResult.hasFieldValue
         }
    }
    var fieldValue:Int64 {
         get {
              return builderResult.fieldValue
         }
         set (value) {
             builderResult.hasFieldValue = true
             builderResult.fieldValue = value
         }
    }
    func setFieldValue(value:Int64) -> ProtoFieldTypeInt64.Builder {
      self.fieldValue = value
      return self
    }
    internal func clearFieldValue() -> ProtoFieldTypeInt64.Builder{
         builderResult.hasFieldValue = false
         builderResult.fieldValue = Int64(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoFieldTypeInt64.Builder {
      builderResult = ProtoFieldTypeInt64()
      return self
    }
    internal override func clone() throws -> ProtoFieldTypeInt64.Builder {
      return try ProtoFieldTypeInt64.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoFieldTypeInt64 {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoFieldTypeInt64 {
      let returnMe:ProtoFieldTypeInt64 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoFieldTypeInt64) throws -> ProtoFieldTypeInt64.Builder {
      if other == ProtoFieldTypeInt64() {
       return self
      }
      if other.hasFieldValue {
           fieldValue = other.fieldValue
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeInt64.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeInt64.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          fieldValue = try input.readInt64()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoFieldTypeUint32 : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasFieldValue:Bool = false
  private(set) var fieldValue:UInt32 = UInt32(0)

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasFieldValue {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasFieldValue {
      try output.writeUInt32(1, value:fieldValue)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasFieldValue {
      serialize_size += fieldValue.computeUInt32Size(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoFieldTypeUint32> {
    var mergedArray = Array<ProtoFieldTypeUint32>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeUint32? {
    return try ProtoFieldTypeUint32.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoFieldTypeUint32 {
    return try ProtoFieldTypeUint32.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeUint32 {
    return try ProtoFieldTypeUint32.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeUint32 {
    return try ProtoFieldTypeUint32.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeUint32 {
    return try ProtoFieldTypeUint32.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeUint32 {
    return try ProtoFieldTypeUint32.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeUint32 {
    return try ProtoFieldTypeUint32.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoFieldTypeUint32.Builder {
    return ProtoFieldTypeUint32.classBuilder() as! ProtoFieldTypeUint32.Builder
  }
  internal func getBuilder() -> ProtoFieldTypeUint32.Builder {
    return classBuilder() as! ProtoFieldTypeUint32.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeUint32.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeUint32.Builder()
  }
  internal func toBuilder() throws -> ProtoFieldTypeUint32.Builder {
    return try ProtoFieldTypeUint32.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoFieldTypeUint32) throws -> ProtoFieldTypeUint32.Builder {
    return try ProtoFieldTypeUint32.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasFieldValue {
      output += "\(indent) fieldValue: \(fieldValue) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFieldValue {
             hashCode = (hashCode &* 31) &+ fieldValue.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoFieldTypeUint32"
  }
  override internal func className() -> String {
      return "ProtoFieldTypeUint32"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoFieldTypeUint32.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoFieldTypeUint32 = ProtoFieldTypeUint32()
    internal func getMessage() -> ProtoFieldTypeUint32 {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasFieldValue:Bool {
         get {
              return builderResult.hasFieldValue
         }
    }
    var fieldValue:UInt32 {
         get {
              return builderResult.fieldValue
         }
         set (value) {
             builderResult.hasFieldValue = true
             builderResult.fieldValue = value
         }
    }
    func setFieldValue(value:UInt32) -> ProtoFieldTypeUint32.Builder {
      self.fieldValue = value
      return self
    }
    internal func clearFieldValue() -> ProtoFieldTypeUint32.Builder{
         builderResult.hasFieldValue = false
         builderResult.fieldValue = UInt32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoFieldTypeUint32.Builder {
      builderResult = ProtoFieldTypeUint32()
      return self
    }
    internal override func clone() throws -> ProtoFieldTypeUint32.Builder {
      return try ProtoFieldTypeUint32.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoFieldTypeUint32 {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoFieldTypeUint32 {
      let returnMe:ProtoFieldTypeUint32 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoFieldTypeUint32) throws -> ProtoFieldTypeUint32.Builder {
      if other == ProtoFieldTypeUint32() {
       return self
      }
      if other.hasFieldValue {
           fieldValue = other.fieldValue
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeUint32.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeUint32.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          fieldValue = try input.readUInt32()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoFieldTypeUint64 : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasFieldValue:Bool = false
  private(set) var fieldValue:UInt64 = UInt64(0)

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasFieldValue {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasFieldValue {
      try output.writeUInt64(1, value:fieldValue)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasFieldValue {
      serialize_size += fieldValue.computeUInt64Size(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoFieldTypeUint64> {
    var mergedArray = Array<ProtoFieldTypeUint64>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeUint64? {
    return try ProtoFieldTypeUint64.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoFieldTypeUint64 {
    return try ProtoFieldTypeUint64.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeUint64 {
    return try ProtoFieldTypeUint64.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeUint64 {
    return try ProtoFieldTypeUint64.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeUint64 {
    return try ProtoFieldTypeUint64.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeUint64 {
    return try ProtoFieldTypeUint64.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeUint64 {
    return try ProtoFieldTypeUint64.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoFieldTypeUint64.Builder {
    return ProtoFieldTypeUint64.classBuilder() as! ProtoFieldTypeUint64.Builder
  }
  internal func getBuilder() -> ProtoFieldTypeUint64.Builder {
    return classBuilder() as! ProtoFieldTypeUint64.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeUint64.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeUint64.Builder()
  }
  internal func toBuilder() throws -> ProtoFieldTypeUint64.Builder {
    return try ProtoFieldTypeUint64.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoFieldTypeUint64) throws -> ProtoFieldTypeUint64.Builder {
    return try ProtoFieldTypeUint64.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasFieldValue {
      output += "\(indent) fieldValue: \(fieldValue) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFieldValue {
             hashCode = (hashCode &* 31) &+ fieldValue.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoFieldTypeUint64"
  }
  override internal func className() -> String {
      return "ProtoFieldTypeUint64"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoFieldTypeUint64.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoFieldTypeUint64 = ProtoFieldTypeUint64()
    internal func getMessage() -> ProtoFieldTypeUint64 {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasFieldValue:Bool {
         get {
              return builderResult.hasFieldValue
         }
    }
    var fieldValue:UInt64 {
         get {
              return builderResult.fieldValue
         }
         set (value) {
             builderResult.hasFieldValue = true
             builderResult.fieldValue = value
         }
    }
    func setFieldValue(value:UInt64) -> ProtoFieldTypeUint64.Builder {
      self.fieldValue = value
      return self
    }
    internal func clearFieldValue() -> ProtoFieldTypeUint64.Builder{
         builderResult.hasFieldValue = false
         builderResult.fieldValue = UInt64(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoFieldTypeUint64.Builder {
      builderResult = ProtoFieldTypeUint64()
      return self
    }
    internal override func clone() throws -> ProtoFieldTypeUint64.Builder {
      return try ProtoFieldTypeUint64.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoFieldTypeUint64 {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoFieldTypeUint64 {
      let returnMe:ProtoFieldTypeUint64 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoFieldTypeUint64) throws -> ProtoFieldTypeUint64.Builder {
      if other == ProtoFieldTypeUint64() {
       return self
      }
      if other.hasFieldValue {
           fieldValue = other.fieldValue
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeUint64.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeUint64.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          fieldValue = try input.readUInt64()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoFieldTypeSint32 : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasFieldValue:Bool = false
  private(set) var fieldValue:Int32 = Int32(0)

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasFieldValue {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasFieldValue {
      try output.writeSInt32(1, value:fieldValue)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasFieldValue {
      serialize_size += fieldValue.computeSInt32Size(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoFieldTypeSint32> {
    var mergedArray = Array<ProtoFieldTypeSint32>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeSint32? {
    return try ProtoFieldTypeSint32.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoFieldTypeSint32 {
    return try ProtoFieldTypeSint32.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeSint32 {
    return try ProtoFieldTypeSint32.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeSint32 {
    return try ProtoFieldTypeSint32.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeSint32 {
    return try ProtoFieldTypeSint32.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeSint32 {
    return try ProtoFieldTypeSint32.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeSint32 {
    return try ProtoFieldTypeSint32.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoFieldTypeSint32.Builder {
    return ProtoFieldTypeSint32.classBuilder() as! ProtoFieldTypeSint32.Builder
  }
  internal func getBuilder() -> ProtoFieldTypeSint32.Builder {
    return classBuilder() as! ProtoFieldTypeSint32.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeSint32.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeSint32.Builder()
  }
  internal func toBuilder() throws -> ProtoFieldTypeSint32.Builder {
    return try ProtoFieldTypeSint32.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoFieldTypeSint32) throws -> ProtoFieldTypeSint32.Builder {
    return try ProtoFieldTypeSint32.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasFieldValue {
      output += "\(indent) fieldValue: \(fieldValue) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFieldValue {
             hashCode = (hashCode &* 31) &+ fieldValue.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoFieldTypeSint32"
  }
  override internal func className() -> String {
      return "ProtoFieldTypeSint32"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoFieldTypeSint32.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoFieldTypeSint32 = ProtoFieldTypeSint32()
    internal func getMessage() -> ProtoFieldTypeSint32 {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasFieldValue:Bool {
         get {
              return builderResult.hasFieldValue
         }
    }
    var fieldValue:Int32 {
         get {
              return builderResult.fieldValue
         }
         set (value) {
             builderResult.hasFieldValue = true
             builderResult.fieldValue = value
         }
    }
    func setFieldValue(value:Int32) -> ProtoFieldTypeSint32.Builder {
      self.fieldValue = value
      return self
    }
    internal func clearFieldValue() -> ProtoFieldTypeSint32.Builder{
         builderResult.hasFieldValue = false
         builderResult.fieldValue = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoFieldTypeSint32.Builder {
      builderResult = ProtoFieldTypeSint32()
      return self
    }
    internal override func clone() throws -> ProtoFieldTypeSint32.Builder {
      return try ProtoFieldTypeSint32.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoFieldTypeSint32 {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoFieldTypeSint32 {
      let returnMe:ProtoFieldTypeSint32 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoFieldTypeSint32) throws -> ProtoFieldTypeSint32.Builder {
      if other == ProtoFieldTypeSint32() {
       return self
      }
      if other.hasFieldValue {
           fieldValue = other.fieldValue
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeSint32.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeSint32.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          fieldValue = try input.readSInt32()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoFieldTypeSint64 : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasFieldValue:Bool = false
  private(set) var fieldValue:Int64 = Int64(0)

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasFieldValue {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasFieldValue {
      try output.writeSInt64(1, value:fieldValue)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasFieldValue {
      serialize_size += fieldValue.computeSInt64Size(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoFieldTypeSint64> {
    var mergedArray = Array<ProtoFieldTypeSint64>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeSint64? {
    return try ProtoFieldTypeSint64.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoFieldTypeSint64 {
    return try ProtoFieldTypeSint64.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeSint64 {
    return try ProtoFieldTypeSint64.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeSint64 {
    return try ProtoFieldTypeSint64.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeSint64 {
    return try ProtoFieldTypeSint64.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeSint64 {
    return try ProtoFieldTypeSint64.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeSint64 {
    return try ProtoFieldTypeSint64.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoFieldTypeSint64.Builder {
    return ProtoFieldTypeSint64.classBuilder() as! ProtoFieldTypeSint64.Builder
  }
  internal func getBuilder() -> ProtoFieldTypeSint64.Builder {
    return classBuilder() as! ProtoFieldTypeSint64.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeSint64.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeSint64.Builder()
  }
  internal func toBuilder() throws -> ProtoFieldTypeSint64.Builder {
    return try ProtoFieldTypeSint64.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoFieldTypeSint64) throws -> ProtoFieldTypeSint64.Builder {
    return try ProtoFieldTypeSint64.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasFieldValue {
      output += "\(indent) fieldValue: \(fieldValue) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFieldValue {
             hashCode = (hashCode &* 31) &+ fieldValue.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoFieldTypeSint64"
  }
  override internal func className() -> String {
      return "ProtoFieldTypeSint64"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoFieldTypeSint64.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoFieldTypeSint64 = ProtoFieldTypeSint64()
    internal func getMessage() -> ProtoFieldTypeSint64 {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasFieldValue:Bool {
         get {
              return builderResult.hasFieldValue
         }
    }
    var fieldValue:Int64 {
         get {
              return builderResult.fieldValue
         }
         set (value) {
             builderResult.hasFieldValue = true
             builderResult.fieldValue = value
         }
    }
    func setFieldValue(value:Int64) -> ProtoFieldTypeSint64.Builder {
      self.fieldValue = value
      return self
    }
    internal func clearFieldValue() -> ProtoFieldTypeSint64.Builder{
         builderResult.hasFieldValue = false
         builderResult.fieldValue = Int64(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoFieldTypeSint64.Builder {
      builderResult = ProtoFieldTypeSint64()
      return self
    }
    internal override func clone() throws -> ProtoFieldTypeSint64.Builder {
      return try ProtoFieldTypeSint64.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoFieldTypeSint64 {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoFieldTypeSint64 {
      let returnMe:ProtoFieldTypeSint64 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoFieldTypeSint64) throws -> ProtoFieldTypeSint64.Builder {
      if other == ProtoFieldTypeSint64() {
       return self
      }
      if other.hasFieldValue {
           fieldValue = other.fieldValue
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeSint64.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeSint64.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          fieldValue = try input.readSInt64()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoFieldTypeFixed32 : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasFieldValue:Bool = false
  private(set) var fieldValue:UInt32 = UInt32(0)

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasFieldValue {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasFieldValue {
      try output.writeFixed32(1, value:fieldValue)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasFieldValue {
      serialize_size += fieldValue.computeFixed32Size(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoFieldTypeFixed32> {
    var mergedArray = Array<ProtoFieldTypeFixed32>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeFixed32? {
    return try ProtoFieldTypeFixed32.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoFieldTypeFixed32 {
    return try ProtoFieldTypeFixed32.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeFixed32 {
    return try ProtoFieldTypeFixed32.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeFixed32 {
    return try ProtoFieldTypeFixed32.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeFixed32 {
    return try ProtoFieldTypeFixed32.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeFixed32 {
    return try ProtoFieldTypeFixed32.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeFixed32 {
    return try ProtoFieldTypeFixed32.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoFieldTypeFixed32.Builder {
    return ProtoFieldTypeFixed32.classBuilder() as! ProtoFieldTypeFixed32.Builder
  }
  internal func getBuilder() -> ProtoFieldTypeFixed32.Builder {
    return classBuilder() as! ProtoFieldTypeFixed32.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeFixed32.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeFixed32.Builder()
  }
  internal func toBuilder() throws -> ProtoFieldTypeFixed32.Builder {
    return try ProtoFieldTypeFixed32.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoFieldTypeFixed32) throws -> ProtoFieldTypeFixed32.Builder {
    return try ProtoFieldTypeFixed32.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasFieldValue {
      output += "\(indent) fieldValue: \(fieldValue) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFieldValue {
             hashCode = (hashCode &* 31) &+ fieldValue.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoFieldTypeFixed32"
  }
  override internal func className() -> String {
      return "ProtoFieldTypeFixed32"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoFieldTypeFixed32.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoFieldTypeFixed32 = ProtoFieldTypeFixed32()
    internal func getMessage() -> ProtoFieldTypeFixed32 {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasFieldValue:Bool {
         get {
              return builderResult.hasFieldValue
         }
    }
    var fieldValue:UInt32 {
         get {
              return builderResult.fieldValue
         }
         set (value) {
             builderResult.hasFieldValue = true
             builderResult.fieldValue = value
         }
    }
    func setFieldValue(value:UInt32) -> ProtoFieldTypeFixed32.Builder {
      self.fieldValue = value
      return self
    }
    internal func clearFieldValue() -> ProtoFieldTypeFixed32.Builder{
         builderResult.hasFieldValue = false
         builderResult.fieldValue = UInt32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoFieldTypeFixed32.Builder {
      builderResult = ProtoFieldTypeFixed32()
      return self
    }
    internal override func clone() throws -> ProtoFieldTypeFixed32.Builder {
      return try ProtoFieldTypeFixed32.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoFieldTypeFixed32 {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoFieldTypeFixed32 {
      let returnMe:ProtoFieldTypeFixed32 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoFieldTypeFixed32) throws -> ProtoFieldTypeFixed32.Builder {
      if other == ProtoFieldTypeFixed32() {
       return self
      }
      if other.hasFieldValue {
           fieldValue = other.fieldValue
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeFixed32.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeFixed32.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 13 :
          fieldValue = try input.readFixed32()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoFieldTypeFixed64 : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasFieldValue:Bool = false
  private(set) var fieldValue:UInt64 = UInt64(0)

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasFieldValue {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasFieldValue {
      try output.writeFixed64(1, value:fieldValue)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasFieldValue {
      serialize_size += fieldValue.computeFixed64Size(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoFieldTypeFixed64> {
    var mergedArray = Array<ProtoFieldTypeFixed64>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeFixed64? {
    return try ProtoFieldTypeFixed64.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoFieldTypeFixed64 {
    return try ProtoFieldTypeFixed64.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeFixed64 {
    return try ProtoFieldTypeFixed64.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeFixed64 {
    return try ProtoFieldTypeFixed64.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeFixed64 {
    return try ProtoFieldTypeFixed64.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeFixed64 {
    return try ProtoFieldTypeFixed64.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeFixed64 {
    return try ProtoFieldTypeFixed64.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoFieldTypeFixed64.Builder {
    return ProtoFieldTypeFixed64.classBuilder() as! ProtoFieldTypeFixed64.Builder
  }
  internal func getBuilder() -> ProtoFieldTypeFixed64.Builder {
    return classBuilder() as! ProtoFieldTypeFixed64.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeFixed64.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeFixed64.Builder()
  }
  internal func toBuilder() throws -> ProtoFieldTypeFixed64.Builder {
    return try ProtoFieldTypeFixed64.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoFieldTypeFixed64) throws -> ProtoFieldTypeFixed64.Builder {
    return try ProtoFieldTypeFixed64.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasFieldValue {
      output += "\(indent) fieldValue: \(fieldValue) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFieldValue {
             hashCode = (hashCode &* 31) &+ fieldValue.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoFieldTypeFixed64"
  }
  override internal func className() -> String {
      return "ProtoFieldTypeFixed64"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoFieldTypeFixed64.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoFieldTypeFixed64 = ProtoFieldTypeFixed64()
    internal func getMessage() -> ProtoFieldTypeFixed64 {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasFieldValue:Bool {
         get {
              return builderResult.hasFieldValue
         }
    }
    var fieldValue:UInt64 {
         get {
              return builderResult.fieldValue
         }
         set (value) {
             builderResult.hasFieldValue = true
             builderResult.fieldValue = value
         }
    }
    func setFieldValue(value:UInt64) -> ProtoFieldTypeFixed64.Builder {
      self.fieldValue = value
      return self
    }
    internal func clearFieldValue() -> ProtoFieldTypeFixed64.Builder{
         builderResult.hasFieldValue = false
         builderResult.fieldValue = UInt64(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoFieldTypeFixed64.Builder {
      builderResult = ProtoFieldTypeFixed64()
      return self
    }
    internal override func clone() throws -> ProtoFieldTypeFixed64.Builder {
      return try ProtoFieldTypeFixed64.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoFieldTypeFixed64 {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoFieldTypeFixed64 {
      let returnMe:ProtoFieldTypeFixed64 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoFieldTypeFixed64) throws -> ProtoFieldTypeFixed64.Builder {
      if other == ProtoFieldTypeFixed64() {
       return self
      }
      if other.hasFieldValue {
           fieldValue = other.fieldValue
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeFixed64.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeFixed64.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 9 :
          fieldValue = try input.readFixed64()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoFieldTypeSfixed32 : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasFieldValue:Bool = false
  private(set) var fieldValue:Int32 = Int32(0)

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasFieldValue {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasFieldValue {
      try output.writeSFixed32(1, value:fieldValue)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasFieldValue {
      serialize_size += fieldValue.computeSFixed32Size(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoFieldTypeSfixed32> {
    var mergedArray = Array<ProtoFieldTypeSfixed32>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeSfixed32? {
    return try ProtoFieldTypeSfixed32.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoFieldTypeSfixed32 {
    return try ProtoFieldTypeSfixed32.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeSfixed32 {
    return try ProtoFieldTypeSfixed32.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeSfixed32 {
    return try ProtoFieldTypeSfixed32.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeSfixed32 {
    return try ProtoFieldTypeSfixed32.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeSfixed32 {
    return try ProtoFieldTypeSfixed32.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeSfixed32 {
    return try ProtoFieldTypeSfixed32.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoFieldTypeSfixed32.Builder {
    return ProtoFieldTypeSfixed32.classBuilder() as! ProtoFieldTypeSfixed32.Builder
  }
  internal func getBuilder() -> ProtoFieldTypeSfixed32.Builder {
    return classBuilder() as! ProtoFieldTypeSfixed32.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeSfixed32.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeSfixed32.Builder()
  }
  internal func toBuilder() throws -> ProtoFieldTypeSfixed32.Builder {
    return try ProtoFieldTypeSfixed32.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoFieldTypeSfixed32) throws -> ProtoFieldTypeSfixed32.Builder {
    return try ProtoFieldTypeSfixed32.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasFieldValue {
      output += "\(indent) fieldValue: \(fieldValue) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFieldValue {
             hashCode = (hashCode &* 31) &+ fieldValue.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoFieldTypeSfixed32"
  }
  override internal func className() -> String {
      return "ProtoFieldTypeSfixed32"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoFieldTypeSfixed32.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoFieldTypeSfixed32 = ProtoFieldTypeSfixed32()
    internal func getMessage() -> ProtoFieldTypeSfixed32 {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasFieldValue:Bool {
         get {
              return builderResult.hasFieldValue
         }
    }
    var fieldValue:Int32 {
         get {
              return builderResult.fieldValue
         }
         set (value) {
             builderResult.hasFieldValue = true
             builderResult.fieldValue = value
         }
    }
    func setFieldValue(value:Int32) -> ProtoFieldTypeSfixed32.Builder {
      self.fieldValue = value
      return self
    }
    internal func clearFieldValue() -> ProtoFieldTypeSfixed32.Builder{
         builderResult.hasFieldValue = false
         builderResult.fieldValue = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoFieldTypeSfixed32.Builder {
      builderResult = ProtoFieldTypeSfixed32()
      return self
    }
    internal override func clone() throws -> ProtoFieldTypeSfixed32.Builder {
      return try ProtoFieldTypeSfixed32.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoFieldTypeSfixed32 {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoFieldTypeSfixed32 {
      let returnMe:ProtoFieldTypeSfixed32 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoFieldTypeSfixed32) throws -> ProtoFieldTypeSfixed32.Builder {
      if other == ProtoFieldTypeSfixed32() {
       return self
      }
      if other.hasFieldValue {
           fieldValue = other.fieldValue
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeSfixed32.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeSfixed32.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 13 :
          fieldValue = try input.readSFixed32()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoFieldTypeSfixed64 : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasFieldValue:Bool = false
  private(set) var fieldValue:Int64 = Int64(0)

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasFieldValue {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasFieldValue {
      try output.writeSFixed64(1, value:fieldValue)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasFieldValue {
      serialize_size += fieldValue.computeSFixed64Size(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoFieldTypeSfixed64> {
    var mergedArray = Array<ProtoFieldTypeSfixed64>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeSfixed64? {
    return try ProtoFieldTypeSfixed64.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoFieldTypeSfixed64 {
    return try ProtoFieldTypeSfixed64.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeSfixed64 {
    return try ProtoFieldTypeSfixed64.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeSfixed64 {
    return try ProtoFieldTypeSfixed64.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeSfixed64 {
    return try ProtoFieldTypeSfixed64.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeSfixed64 {
    return try ProtoFieldTypeSfixed64.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeSfixed64 {
    return try ProtoFieldTypeSfixed64.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoFieldTypeSfixed64.Builder {
    return ProtoFieldTypeSfixed64.classBuilder() as! ProtoFieldTypeSfixed64.Builder
  }
  internal func getBuilder() -> ProtoFieldTypeSfixed64.Builder {
    return classBuilder() as! ProtoFieldTypeSfixed64.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeSfixed64.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeSfixed64.Builder()
  }
  internal func toBuilder() throws -> ProtoFieldTypeSfixed64.Builder {
    return try ProtoFieldTypeSfixed64.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoFieldTypeSfixed64) throws -> ProtoFieldTypeSfixed64.Builder {
    return try ProtoFieldTypeSfixed64.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasFieldValue {
      output += "\(indent) fieldValue: \(fieldValue) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFieldValue {
             hashCode = (hashCode &* 31) &+ fieldValue.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoFieldTypeSfixed64"
  }
  override internal func className() -> String {
      return "ProtoFieldTypeSfixed64"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoFieldTypeSfixed64.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoFieldTypeSfixed64 = ProtoFieldTypeSfixed64()
    internal func getMessage() -> ProtoFieldTypeSfixed64 {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasFieldValue:Bool {
         get {
              return builderResult.hasFieldValue
         }
    }
    var fieldValue:Int64 {
         get {
              return builderResult.fieldValue
         }
         set (value) {
             builderResult.hasFieldValue = true
             builderResult.fieldValue = value
         }
    }
    func setFieldValue(value:Int64) -> ProtoFieldTypeSfixed64.Builder {
      self.fieldValue = value
      return self
    }
    internal func clearFieldValue() -> ProtoFieldTypeSfixed64.Builder{
         builderResult.hasFieldValue = false
         builderResult.fieldValue = Int64(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoFieldTypeSfixed64.Builder {
      builderResult = ProtoFieldTypeSfixed64()
      return self
    }
    internal override func clone() throws -> ProtoFieldTypeSfixed64.Builder {
      return try ProtoFieldTypeSfixed64.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoFieldTypeSfixed64 {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoFieldTypeSfixed64 {
      let returnMe:ProtoFieldTypeSfixed64 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoFieldTypeSfixed64) throws -> ProtoFieldTypeSfixed64.Builder {
      if other == ProtoFieldTypeSfixed64() {
       return self
      }
      if other.hasFieldValue {
           fieldValue = other.fieldValue
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeSfixed64.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeSfixed64.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 9 :
          fieldValue = try input.readSFixed64()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoFieldTypeBool : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasFieldValue:Bool = false
  private(set) var fieldValue:Bool = false

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasFieldValue {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasFieldValue {
      try output.writeBool(1, value:fieldValue)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasFieldValue {
      serialize_size += fieldValue.computeBoolSize(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoFieldTypeBool> {
    var mergedArray = Array<ProtoFieldTypeBool>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeBool? {
    return try ProtoFieldTypeBool.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoFieldTypeBool {
    return try ProtoFieldTypeBool.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeBool {
    return try ProtoFieldTypeBool.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeBool {
    return try ProtoFieldTypeBool.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeBool {
    return try ProtoFieldTypeBool.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeBool {
    return try ProtoFieldTypeBool.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeBool {
    return try ProtoFieldTypeBool.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoFieldTypeBool.Builder {
    return ProtoFieldTypeBool.classBuilder() as! ProtoFieldTypeBool.Builder
  }
  internal func getBuilder() -> ProtoFieldTypeBool.Builder {
    return classBuilder() as! ProtoFieldTypeBool.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeBool.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeBool.Builder()
  }
  internal func toBuilder() throws -> ProtoFieldTypeBool.Builder {
    return try ProtoFieldTypeBool.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoFieldTypeBool) throws -> ProtoFieldTypeBool.Builder {
    return try ProtoFieldTypeBool.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasFieldValue {
      output += "\(indent) fieldValue: \(fieldValue) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFieldValue {
             hashCode = (hashCode &* 31) &+ fieldValue.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoFieldTypeBool"
  }
  override internal func className() -> String {
      return "ProtoFieldTypeBool"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoFieldTypeBool.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoFieldTypeBool = ProtoFieldTypeBool()
    internal func getMessage() -> ProtoFieldTypeBool {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasFieldValue:Bool {
         get {
              return builderResult.hasFieldValue
         }
    }
    var fieldValue:Bool {
         get {
              return builderResult.fieldValue
         }
         set (value) {
             builderResult.hasFieldValue = true
             builderResult.fieldValue = value
         }
    }
    func setFieldValue(value:Bool) -> ProtoFieldTypeBool.Builder {
      self.fieldValue = value
      return self
    }
    internal func clearFieldValue() -> ProtoFieldTypeBool.Builder{
         builderResult.hasFieldValue = false
         builderResult.fieldValue = false
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoFieldTypeBool.Builder {
      builderResult = ProtoFieldTypeBool()
      return self
    }
    internal override func clone() throws -> ProtoFieldTypeBool.Builder {
      return try ProtoFieldTypeBool.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoFieldTypeBool {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoFieldTypeBool {
      let returnMe:ProtoFieldTypeBool = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoFieldTypeBool) throws -> ProtoFieldTypeBool.Builder {
      if other == ProtoFieldTypeBool() {
       return self
      }
      if other.hasFieldValue {
           fieldValue = other.fieldValue
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeBool.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeBool.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          fieldValue = try input.readBool()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoFieldTypeString : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasFieldValue:Bool = false
  private(set) var fieldValue:String = ""

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasFieldValue {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasFieldValue {
      try output.writeString(1, value:fieldValue)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasFieldValue {
      serialize_size += fieldValue.computeStringSize(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoFieldTypeString> {
    var mergedArray = Array<ProtoFieldTypeString>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeString? {
    return try ProtoFieldTypeString.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoFieldTypeString {
    return try ProtoFieldTypeString.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeString {
    return try ProtoFieldTypeString.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeString {
    return try ProtoFieldTypeString.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeString {
    return try ProtoFieldTypeString.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeString {
    return try ProtoFieldTypeString.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeString {
    return try ProtoFieldTypeString.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoFieldTypeString.Builder {
    return ProtoFieldTypeString.classBuilder() as! ProtoFieldTypeString.Builder
  }
  internal func getBuilder() -> ProtoFieldTypeString.Builder {
    return classBuilder() as! ProtoFieldTypeString.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeString.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeString.Builder()
  }
  internal func toBuilder() throws -> ProtoFieldTypeString.Builder {
    return try ProtoFieldTypeString.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoFieldTypeString) throws -> ProtoFieldTypeString.Builder {
    return try ProtoFieldTypeString.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasFieldValue {
      output += "\(indent) fieldValue: \(fieldValue) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFieldValue {
             hashCode = (hashCode &* 31) &+ fieldValue.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoFieldTypeString"
  }
  override internal func className() -> String {
      return "ProtoFieldTypeString"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoFieldTypeString.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoFieldTypeString = ProtoFieldTypeString()
    internal func getMessage() -> ProtoFieldTypeString {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasFieldValue:Bool {
         get {
              return builderResult.hasFieldValue
         }
    }
    var fieldValue:String {
         get {
              return builderResult.fieldValue
         }
         set (value) {
             builderResult.hasFieldValue = true
             builderResult.fieldValue = value
         }
    }
    func setFieldValue(value:String) -> ProtoFieldTypeString.Builder {
      self.fieldValue = value
      return self
    }
    internal func clearFieldValue() -> ProtoFieldTypeString.Builder{
         builderResult.hasFieldValue = false
         builderResult.fieldValue = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoFieldTypeString.Builder {
      builderResult = ProtoFieldTypeString()
      return self
    }
    internal override func clone() throws -> ProtoFieldTypeString.Builder {
      return try ProtoFieldTypeString.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoFieldTypeString {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoFieldTypeString {
      let returnMe:ProtoFieldTypeString = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoFieldTypeString) throws -> ProtoFieldTypeString.Builder {
      if other == ProtoFieldTypeString() {
       return self
      }
      if other.hasFieldValue {
           fieldValue = other.fieldValue
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeString.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeString.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          fieldValue = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class ProtoFieldTypeBytes : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasFieldValue:Bool = false
  private(set) var fieldValue:NSData = NSData()

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasFieldValue {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasFieldValue {
      try output.writeData(1, value:fieldValue)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasFieldValue {
      serialize_size += fieldValue.computeDataSize(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtoFieldTypeBytes> {
    var mergedArray = Array<ProtoFieldTypeBytes>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeBytes? {
    return try ProtoFieldTypeBytes.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> ProtoFieldTypeBytes {
    return try ProtoFieldTypeBytes.Builder().mergeFromData(data, extensionRegistry:MessagesRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeBytes {
    return try ProtoFieldTypeBytes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> ProtoFieldTypeBytes {
    return try ProtoFieldTypeBytes.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeBytes {
    return try ProtoFieldTypeBytes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeBytes {
    return try ProtoFieldTypeBytes.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeBytes {
    return try ProtoFieldTypeBytes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ProtoFieldTypeBytes.Builder {
    return ProtoFieldTypeBytes.classBuilder() as! ProtoFieldTypeBytes.Builder
  }
  internal func getBuilder() -> ProtoFieldTypeBytes.Builder {
    return classBuilder() as! ProtoFieldTypeBytes.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeBytes.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ProtoFieldTypeBytes.Builder()
  }
  internal func toBuilder() throws -> ProtoFieldTypeBytes.Builder {
    return try ProtoFieldTypeBytes.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ProtoFieldTypeBytes) throws -> ProtoFieldTypeBytes.Builder {
    return try ProtoFieldTypeBytes.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasFieldValue {
      output += "\(indent) fieldValue: \(fieldValue) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFieldValue {
             hashCode = (hashCode &* 31) &+ fieldValue.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ProtoFieldTypeBytes"
  }
  override internal func className() -> String {
      return "ProtoFieldTypeBytes"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ProtoFieldTypeBytes.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ProtoFieldTypeBytes = ProtoFieldTypeBytes()
    internal func getMessage() -> ProtoFieldTypeBytes {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasFieldValue:Bool {
         get {
              return builderResult.hasFieldValue
         }
    }
    var fieldValue:NSData {
         get {
              return builderResult.fieldValue
         }
         set (value) {
             builderResult.hasFieldValue = true
             builderResult.fieldValue = value
         }
    }
    func setFieldValue(value:NSData) -> ProtoFieldTypeBytes.Builder {
      self.fieldValue = value
      return self
    }
    internal func clearFieldValue() -> ProtoFieldTypeBytes.Builder{
         builderResult.hasFieldValue = false
         builderResult.fieldValue = NSData()
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtoFieldTypeBytes.Builder {
      builderResult = ProtoFieldTypeBytes()
      return self
    }
    internal override func clone() throws -> ProtoFieldTypeBytes.Builder {
      return try ProtoFieldTypeBytes.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> ProtoFieldTypeBytes {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtoFieldTypeBytes {
      let returnMe:ProtoFieldTypeBytes = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtoFieldTypeBytes) throws -> ProtoFieldTypeBytes.Builder {
      if other == ProtoFieldTypeBytes() {
       return self
      }
      if other.hasFieldValue {
           fieldValue = other.fieldValue
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtoFieldTypeBytes.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFieldTypeBytes.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          fieldValue = try input.readData()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}


// @@protoc_insertion_point(global_scope)
